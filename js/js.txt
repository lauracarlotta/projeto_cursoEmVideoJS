====> com Prof. Gustavo Guanabara do Curso em vídeo <====


*** NUNCA DIGA QUE VOCÊ É UM PROGRAMADOR EM HTML OU CSS. DIGA QUE VOCÊ USA ELES COMO FERRAMENTAS PARA CRIAR UM SITE, MAS NO CASO, VOCÊ PROGRAMA EM js. => desenvolve coisas em html e css.

A COMUNIDADE NÃO ACEITA BEM QUEM DIZ QUE PROGRAMA EM HTML OU CSS, ENTÃO NÃO FALE ISSO POIS AS PESSOAS PODEM TE JULGAR MAL!!!!!! *****

Sites/app que usam o JS:
- Google
- Youtube
- Linkedin
- Netflix
- Facebook
- Uber
- Paypal

Tecnologias:
* Jquery
* Angular
* React
* VueJS
* Electron
* Ionic
* Cordova

-------------------------
 * Introdução ao Curso *
-------------------------


> 1 Aula
	Introdução – JavaScript Moderno
	
	
*********************************************	
   => Módulo A: Conhecendo o JavaScript
*********************************************

	>> 4 Aulas <<
		-----------------------------------------------
		 Aula 1 – O que o JavaScript é capaz de fazer?
		-----------------------------------------------
		
		${O QUE O JS FAZ?} = QUASE TUDO!!! é basicaente um client side!
		
		(Você sabe para que serve a linguagem JavaScript / ECMAScript? Sabe a diferença entre um cliente e um servidor para a Internet? Sabe para que servem as tecnologias HTML5, CSS3 e JavaScript? Consegue citar 4 sites que utilizam a linguagem JavaScript nos seus códigos?)
		
> COMO FUNCIONA:
		
		  cliente = usuário
		 servidor = quem fornece os dados/arquivos
		 
		CLIENTE X SERVIDOR  
		   |__________|
		         |
		      browser
		        url      - vai p/ a infraestrutura da internet
		         |
		      servidor   - banco de arquivos
		      
		      
	servidor = com sis op, fundamentalmente é como nossa máquina pessoal. 
	
		        
		=> O CLIENTE PRECISA DE DADOS DE UM SERVIDOR.
		=> qUANDO VOCÊ ACESSA O BROWSER E SOLICITA AO SERVIDOR UMA PÁGINA, VOCÊ ESTÁ PEDINDO DIRETORIOS, ARQUIVOS, ENFIM, (ESSES ARQUIVOS QUASE SEMPRE SÃO EM HTML) > o servidor te devolve a página solicitada como uma cópia (o servidor sabe através de diversos protocolos qual arquivo te enviar através do que você solicitou) > o seu browser recebe os arquivos do fornecedor e ele começa a montar a página pra você, fazer a interface dela. 
	
	
	
	> WEBSITE <
	 	
	 	ALÉM DOS SITES JÁ CITADOS ACIMA, QUE USAM O JS AINDA TEMOS MUITOS OUTROS, Amazon. com, IBM, sites do governo dos Estados Unidos, do governo do Brasil e etc. 
	 	
	 	
		O JS FUNCIONA EM CONJ COM OUTRAS 2 TECNOLOGIAS: 
		HTML + CSS (a partir da metafora da criação de um jornal: )
		
		- JORNALISTA = texto, conteúdo, imagens, midia, link = CONTEÚDO;
		
		- DESIGNER = pega tudo e deixa mais bonito, cores, fontes, deixa tudo mais atraente, afinal o conteúdo não se vende sozinho = DEIXAR ATRATIVO PARA A VENDA, INTERFACE;
		
		- PROGRAMADOR = CÉREBRO - vai cuidar da engenharia, onde entregar o jornal, verificar se entregou o jornal, segurança, etc. = ENGENHARIA DA PORRA TODA.
		 
		
		 - HTML = <h1>, <p>, <imag/>
		 - CSS = {border, background-color, margin}
		 - JS = {"hover"}
		 
		 
		 	--------------------
		 	| - HTML = CONTEÚDO |
		 	| - CSS = ESTILO    |
		 	| - JS = INTERAÇÃO  |
		        --------------------
		
---------------------------------------------------------------------		
		
		
		----------------------------------
		 Aula 2 – Como chegamos até aqui?
		----------------------------------

(Você sabe qual foi a empresa a criar o JavaScript? Sabe qual é a diferença entre as linguagens Java e JavaScript? Sabe qual é a relação que existe entre as linguagens JavaScript e ECMAScript? Sabia que, por exemplo, o programa usado para acessar WhatsApp no computador é feito em JavaScript?)

(... Na aula passada => )

> Guanabara ask...
------------------

	1 - Diferença entre um cliente e um servidor da internet? 
			
			CLIENTE É O USUÁRIO, QUEM SOLICITA AS INFOS E O SERVIDOR É QUEM FORNECE O QUE FOI SOLICITADO PELO USUÁRIO, QUEM ENVIA UMA 				CÓPIA PARA O BROWSER SOBRE AS INFOS CONVOCADAS. O BROWSER ABRE AS INFOS (ARQUIVOS) PARA QUE O USUÁRIO POSSA "LÊ-LAS".
			
			
	2 - Para que serve HTML, CSS e JS? 
	
			HTML = CUIDA DO CONTEÚDO DA PÁGINA
			CSS = CUIDA DO ESTILO DE COMO O CONTEÚDO DO HTML SERÁ APRESENTADO PARA O USUÁRIO
			JS = CUIDA DA PARTE INTERATIVA COM O USUÁRIO (INTERAÇÃO, O CONTRÁRIO DE PÁGINA ESTÁTICA).
			
			
	3 - 4 sites que fazem o uso do JS?
			
			* YOUTUBE
			* GOOGLE
			* AMAZON
			* AMERICANAS.
			

${Evolução do JS}

(GUERRA FRIA)
 1970 +-
 
 - INTERNET
 - EUA = DARPA
  (ARPANET - Até chegar a "internet")
  varias universidades = ex: MIT
  
 1993 (TBL, no Cern)
  - html
  - tcp/ip
  - www
  
  
  > ncsa (mark endersen)
  - MOSAIC = 1º navegador
  
  1994
  - Jim clark + mark endersen = Netscape
  
  1995 (Brandon aik)
  - MOca
  
  - ao mesmo tempo nascendo o JAVA
  
  e lançaram (a Netscape) o JAVAScript numa jogada de marketing.
  
  1997
  Netscape padroniza a linguagem JS para não virar uma bagunça, pois no ano de 1995 a Microsoft (por ter olho grande e vendo o sucesso da coisa toda) cria o jScript.
  
  então a ECMA - europa (como a ISO nos EUA) é uma empresa de padronização cria o ECMAScript <= padronizando a linguagem.
  
  2002 - fim da treta entra Netscape e MIcrosoft
  Netscape fale pois os computs da microsoft já vinham com navegador intalado, (o IE - internet explorer)
  e assim os funcionários que eram da Netscape fundam o Mozilla
  que é o Firefox
  
  2008
  outra empresa vendo o sucesso e a evolução da internet
  cria o google chrome
  
  2009
  (com o chrome) surge o V8 - motor interno de JS muito podereso 
  motor por debaixo do capô que roda JS
   * Cada navegador te seu próprio motor:
    Firefox = SpiderMonkei
    Safari = nitro
    Opera = karakan
    Microsoft = Shacra
    
   o que torno o v8 muito importante é que ele gerava código git ou just-in-time = o que é muito importante*
   além de o v8 ser em código aberto/livre
 
 ENTÃO VAMOS LÁ: JÁ QUE O V8 É CÓDIGO ABERTO E SÓ RODA NO CHROME, EU POSSO PEGAR O CÓDIGO, ODIFICAR ELE PRA RODAR FORA DO CHROME: SERGE ENTÃO, EM 2010, O *** NodeJS ***
 
 2010
 NodeJS - uma máquina que roda JS fora do navegador (assim posibilitoo o JS rodar no servidor também)
 
 => ECMAScript - versão padronizada do JS
 	
 	1997 - versão 1.0 (JS 1.0 - padronizado pela ECMA)
 	
 	1998 - versão 2.0 (pequenas atualizações)
 	
 	1999 - versão 3.0 (compatibilidade com expressões regulares, bloco trycat para poder tratar erros que não existia nas versões anteriores - mas já existia nas liguagens C e JAVA)
 	
 	2009 - surge a verão 5 (pulando a 4 por causa da demora) que ficou conhecida por ES5 - essa versão mais popular de todas, compativel com quase todos os navegadores atuais (compativel com jason )e trouxe vários metodos para tratar a race
 	
 	2015 - ES6 (trouxe os declaradores let e const e também as strigs em templates - que vamos usar muito no curso)
 	
 	começa a sair um por ano e passa a se chamar pelo nome!
 	
 	2016 - ES 2016 - operador de exponensiação
 	
 	2017 - ES 2017 - compatibilidade com funções assincronas
 	
 	2018 - ES 2018 - novidades em expressões regulares (regrets) e possibilidades de promisses (promessas)
 	
 	
==> com a evolução do JS surgem muitas tecnologias:

(angular - google * react - facebook)

(jQuery - conj de bibliotecas - criado pela galera do Mozilla que facilitava muito o uso de interatividades em JS - não é um framework)

(angular - criado e mantido pelo google, facilita muito a craição de aplicações web - ling. enos imperativa. Mais declarativa - Mais sema=elhante ao sql para banco de dados)

(react - facebook = mais ou menos as mesmas funcionalidades do Angular mas tem algumas flexibilidades maiores, por exeplo o react native para criação de aplicações em celular)

(2014 - framework vue - ex-programador do googl
e - ele estava cansado de usar o angular)

(electron - mantido pelo github - especializado para a criação de interfaces gráficas)

(vizual studiocode - microsoft - foi feito em electron, bem como o whatsapp desktop, discord, slack)

(ionic - sdk pra poder criar aplicações para dispositivos móveis - ele usa o nodeJS para rodar o arquivo fora do navergador * vários acimausam o nodeJS também com a mesma finalidade * se baseava também numa versão antiga do JS chamada Phonegap que hoje é mantida pela APACHE. Ela evoluiu e se chama CORDOVA)

várias bibliotecas, frameworks, sdks, etc para a criação de jogos
 	
 
{class FazMerda(models.Model):
    def Delete_Everything:
        if js.txt is True:	
            js.txt.delete()
            
        else:
            pass} by Well



---------------------------------------------------------------------


		 
	       ------------------------------------
		Aula 3 – Dando os primeiros passos
	       ------------------------------------
	       
(Quais são os melhores livros de JavaScript em Português? Onde ter acesso à documentação oficial do JavaScript em Português e Inglês? Quais são os requisitos de software para aprender a programar em JavaScript? Qual é o melhor editor para códigos JavaScript? Como instalar o Node.js no seu computador? Como configurar o Node.js? Para aprender JavaScript, é realmente necessário saber muito Inglês?Você está precisando de dicas para estudar e aprender de verdade?)	       


> Guanabara ask...
------------------

	      
	1 - Que empresa criou o JavaScript?
	
			A FINADA NETSCAPE.
			
			
	2 - JAVA e JavaSript tem alguma relação?
	
			NÃO, APESAR DE AMBAS TEREM CIDO CRIADAS A PARTIR DA LINGUAGEM C, A ÚNICA RELAÇÃO QUE ELAS TEM É QUE O JAVA DO JAVASCRIPT FOI APENAS UMA JOGADA DE MARQKETING DO BATISMO DO NOME, POR SER ALGO QUE JÁ VENDIA/FOI MUITO BEM ACEITO PELO MERCADO.
				
				
	3 - O que o ECMAScript tem a ver com o JavaScript?
	
			ECMAScript É A EMPRESA EUROPÉIA QUE PADRONIZOU O js.
			
			
	4 - Sabia que o programa Whatsapp desktop é criado em JavaScript?
			
			Sim, ASSIM COMO O DISCORD, SLACK, ENTRE TANTOS OUTROS.
			
			 
=> Como aprender?
	
	*Ver vídeos
	*treinar o pc
	*ler
	*anotar coisas
	*interagir com outras pessoas
	*pensar em projetos pessoais
	
	Livros :
	Guia definitivo de JS
	JS guia do programador
	guia mozilla ecma
	ecma site
	
=> Instalação do Node.JS

Preparando o ambiente de desenvolvimento, com:
	Google CHROME
	VS Code 
	NodeJS
	
	
	
---------------------------------------------------------------------		
		
		
		
	   ----------------------------------------
	    Aula 4 – Criando o seu primeiro script
	   ----------------------------------------
	   
(Você já sabe diferenciar dentro do seu código, os trechos em HTML5, em CSS3 e em JavaScript? Sabe organizar as pastas do seu projeto dentro do Visual Studio Code? Sabe como testar se o Node.js está devidamente instalado? Já sabe utilizar os comandos alert, confirm e prompt do JavaScript?)	


> Guanabara ask...
------------------


	1 - Que livros/documentos foram recomendados na aula passada como bibliografia e base de leitura do curso?
	
			OS LIVROS: JAVASCRIPT, O GUIA DEFINITIVO e JAVASCRIPT: O GUIA DO PROGRMADOR e
			OS SITES OFICIAIS DO MOZILLA (MDN) e DO ECMASCRIPT.
			
						
	2 - Para aprender JS, precisamos saber inglês?
	
			AJUDA? COM CERTEZA! PRECISA? NÃO! hOJE EM DIA JÁ TEM MUITOS SITES, ARQUIVOS E ETC TRADUZIDOS PARA O PT.
			
			
	3 - Que dicas foram dadas para quem quer estudar, metódos de estudo?
	
			* ANOTE
			* PRATIQUE
			* DESENVOLVA SEUS PRÓPRIO PROJETOS
			* ESTUDE COM DUAS TELAS, ETC
			
			
	4 - Quais programas foram instalados para podemos fazer o curso com nosso ambiente de desenvolvimento de estudo montado?
	
			3 ARQUIVOS:
			 - Node.JS
			 - Google Chrome
			 - VS Code
			 
	

		${Nossos primeiros Scripts}		
	 
	 ...MAndando bala no VS code (criando as pastas e arquivos)
	 
	 - comandos basicos da página html;
	 - basico de css interno;
	 - 3 comandos em js:
	 	
	 	window.alert,
	 	window.confirm,
	 	window.prompt.
	 	
	 	
	 	<!DOCTYPE html> <!--html é uma linguagem de marcação/conteúdo-->
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meu primeiro programa</title>
    <style> /* css é uma linguagem de folhas de estilos */
        body{
            background-color: rgb(47, 47, 90);
            color: #ffffff;
            font: normal 20pt arial;
        }
        
        h1{
            color: rgb(199, 199, 41);
        }
    </style>
</head>

<body>
    
    <h1>Olá, mundo!</h1>
    <p>Já me livrei da maldição</p> <!--Geralmente o script ficará antes da tag </body> para que ele primeiro carregue o arquivo base e depois os scripts-->

    <script>
        window.alert('Minha primiera mensagem!');
        window.confirm('Está gostando do JS?');
        window.prompt('Qual o seu nome?');
    </script>

</body>
</html>


---------------------------------------------------------------------

	 

*************************************************		
   => Módulo B: Comandos Básicos do JavaScript
*************************************************

       >> 4 Aulas <<
       
		- armazenar dados
		- tratamentos de dados
		- tipo primitivos
		- operações com dados
		
		
              ---------------------------------------
		Aula 5 – Variáveis e Tipos Primitivos
	      ----------------------------------------
	      
(Você sabe o que são variáveis? Sabe declarar variáveis em JavaScript? Sabe quais são os tipos primitivos do JavaScript? Consegue entender o que significa colocar um valor null dentro de uma variável em JavaScript?)

> Guanabara ask...
------------------


	1 - Como gerenciar pastas no VS Code?
	
			SIM, COM FOLDER OU FILE
			
			
	2 - NodeJS ta instalado no seu pc? Pra que serve o NodeJS?
	
			SIM, ELE FAZ COM QUE POSSAMOS RODAM O CÓDIGO FORA DO BROWSER
			
			
	3 - SAbe identificar/diferenciar o HTML5, CSS3 e JS de um cód?
	
			SIM, O HTML ABRE O ARQUIVO COM <!DOCTYPE html> E FECHA COM </html>. O CSS PODE SER EM ARQUIVO INTERNO OU EXTERNO (INTERNAMENTE PODEMOS IDENTIFICÁ-LO ENTRE AS TAGS <style> e </style> E JS GERALMENTE VEREMOS ELE ANTES DA TAG </BODY>, ENTRE AS TAGS <script> e </script>)
			
			
			
	4 - Já sabe disparar um alertas, confirmação e pergunta?
			
			SIM, COM OS COMANDOS:
				EX - 
				
				window.alert('Seja bem vindo ao JS! ');
				confirm('Está gostando do Curso em Vídeo? ');
				prompt('Qual é o seu nome? ');
				
				
				
	
	=> Depois que eu dei os alerts, para onde foram as informações coletados do usuário? 
	
	==>> Onde os dados foram guardados?? <<==
	
	
 >  Explicou os comentários também como incluir com // e /* */  <
 
 	=> Explicando o conceito de variável usando uma metáfora de terreno onde eu não construi uma casa e sim um estacionamento onde pra cada vaga (seja pra carro, moto, caminhão ou bicicleta) foram delimitados os espaços e adicionando numeros (ou nomes) para podermos identificar, encontrar cada automóvel estacionado. Lembrndo que cada "vaga" teve um tamanho diferente já que os autompoveis não são todos do meso tamanho. (Os separamos em grupos de automóveis = a1 - a6, caminhão = c1 - c4 e motos = m1 - m8) 
 	Logo vaga é a variável
 	então a noenclatura ficou:
 	
 		 vaga a1 = carro1 (recece valor, recebe ou carro,moto ou caminhão) <=
 		         = carro2 (para colocar esse carro eu preciso tirar o carro1 da vaga)
 		         = null   (e se caso eu não queira mais aguardar mais carro nenhuma nessa vaga, eu coloco o comando null)
 		         
 		         Neste caso, aplicando para comput:
 		         
 		         - o terreno é a memória do comput e os carros são os dados.
 		         
 		         então a var recebe um nome (identificação) e atribuimos a ela um valor, ficando assim como no exemplo: (vale lembrar que as variáveis podem ter tamanhos diferentes. Seguem os exemplos - )
 		         
 		         var n1 = 8;       var s1 = "JavaScript";
 		         var n2 = 8.5;     var s2 = 'Curso em Vídeo';
 		         var n3 = 15;      var s3 = `Guanabara`; 
 		         
 Sobre os identificadores: 
 	Regras
 	------
 		> Podem começar com letra, $ ou _      =>  l1, $nome, _local
 		> Não podem começar com numeros        =>  1l, 1nome, 1local
 		> podemos usar letras e numeros        =>  medianota1e2
 		> podemos usar acentos ou simbolos     =>  média#semestre
 		> não podem ter eespaços               =>  media do semestre
 		> e não podem ser palavras reservadas  =>  var alert
 		
 	Dicas
 	-----
 		
 		> maiusculas e minusculas fazem diferenças
 		> nomes coerentes nas variaveis
 		> evite se tornar um "programados alfabeto" ou um "programador contador"
 		
 	tipos de dados (Data Types)
 	--------------
 	
 		> number: numero = 5, -12, 24
 			Infinity
 			NaN = (NotAndNumber)
 			
 		> string: cadeia de caraceteres (numeros de telefone e cpf são considerado strings pois não contém só numeros) = "George", 413.560.848-50, (11) 98758-8455
 		
 		> boolean: valores booleanos = true, false
 		
 		ainda temos:
 			
 			Null = Nulo 
 			Undefined = Indefinido
 			Object (Já que JS é uma ling. OO - Orientada a Objeto)
 				array (vetor)
 			Function (também é um tipo primitivo no JS já que ela também funciona no paradigma funcional e considerar uma function um tipo é algo muito interessante)
 			
 			podemos usar o typeof no JS pra saber qual é o tipo primitivo no node.
 		
 		         
	      			
	      
	      <!DOCTYPE html> <!--html é uma linguagem de marcação/conteúdo-->
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meu primeiro programa</title>
    <style> /* css é uma linguagem de folhas de estilos */
        body{
            background-color: rgb(47, 47, 90);
            color: #ffffff;
            font: normal 20pt arial;
        }
        
        h1{
            color: rgb(199, 199, 41);
        }
    </style>
</head>

<body>
    
    <h1>Olá, mundo!</h1>
    <p>Já me livrei da maldição</p> <!--Geralmente o script ficará antes da tag </body> para que ele primeiro carregue o arquivo base e depois os scripts-->

    <script> // Estamos inserindo a var
        var nome = window.prompt('Qual o seu nome?');
        window.alert('É um grande prazer em te conhecer, ' + nome + '!'); // simbolo de + se lÊ como concatenação.
    </script>

</body>
</html>



---------------------------------------------------------------------

	      
	       -------------------------------
		 Aula 6 – Tratamento de dados
	       -------------------------------
	       
	       
(Você já aprendeu a manipular dados em JavaScript? Sabe como guardar o resultado de um prompt dentro de uma variável? Sabe converter String para Número em JavaScript? Consegue formatar um número para que ele se pareça com um valor monetário usando JavaScript?)

> Guanabara ask...
------------------


		1 - O que é uma variável?
		
				UM LOCAL DA MEMÓRIA ONDE GUARDAMOS INFOS.
				
				
		2 - Como declarar uma variável inteira ou real no JS?
		
				NO JS NÃO FAZ A DIFERENÇA ENTRE INT OU FLOAT (DIFERENTES DE ALGUMAS OUTRAS LINGUAGENS QUE PRECISAM SER DECLARADAS NO INÍCIO.) MAS CASO VOCÊ PRECISE CONVERTER UM NUMBER PARA UMA STRING, AI SERÁ NECESSÁRIO SABER DIFERENCIAR NÚMEROS REAIS DOS INTEIROS.
				
				
		3 - Quais são os tipos primitivos no JS?
		
				Um primitivo (valor primitivo, tipo de dados primitivo) é um dado que não é representado através de um Objeto e, por consequência, não possui métodos. (DEFINIÇÃO MDN)
				
				SÃO ELES:
				
					* STRING
					* NUMBER
					* BOOLEAN
					* NULL
					* UNDEFINID
					* Symbol (novo no ECMAScript 6)
					
					
		4 - O que significa colocar valor Null numa variável?VA
				
				VALOR NULL QUER DIZER NULO*
				
				
		
		
	 ${Manipulação de Dados}
	 
	 	O que é let, const, NaN?
	 	
	 
	 !DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meu primeiro programa</title>
    <style>
        body{
            background-color: rgb(47, 47, 90);
            color: #ffffff;
            font: normal 20pt arial;
        }
        
        h1{
            color: rgb(199, 199, 41);
        }
    </style>
</head>

<body>
    
    <h1>Olá, mundo!</h1>
    <p>Já me livrei da maldição</p>

    <script>
        var n1 = Number.parseFloat(window.prompt('Digite um número: ')); // <= Deixei essa linha com o Number.parseInt para ficar de exemplo // string - o prompt já entende, independente do valor que isso é uma string.
        var n2 = Number(window.prompt('Digite outro número: ')); // string // Não precisa ser Number.parseInt, pode ser soó parseInt (porém no JS atual eu posso colocar só Number(n) e eu deixo o JS decidir o que é: se o numero é inteiro ou real)
        var s = n1 + n2 
        // Tanto faz eu colocar window.alert como só alert
        //alert('A soma dos valores é ' + s) // <= temos que converter isso tudo para numero.
        // concatenação // Como forçar o JS a entender que isso é uma soma?
        // Mas o JS funciona assim: 
        // number + number = para adição (então com um number de um lado e um number do outro dará number),
        // string + string = para concatenação

        //utilizando template strings:
        alert(`A soma de ${n1} e de ${n2} é igual a ${s}`);

        /* 
        string > numero

            Usamos Number.parseInt(n)   ou <= para numeros inteiros => parse é de converter/passear *** NÃO SE ESQUEÇA: o JS é casesensitive então o N de number precisa ser maiusculo assim como o I do int e o F do float.
                   Number.parseFloat(n)    <= para numeros reias, com virgulas => na prog seria ponto (ponto flutuante ou float point)
                
        numero > string
            Usamos String(n)      ou
                   n.toString()     ficando assim:

                   alert('A soma dos valores é ' + String(s))    ou
                   alert('A soma dos valores é ' + s.toString())

                   FORMATANDO STRING ***
                        var s = "JavaScript"
                        ' Eu estou aprendendo s ' // não faz a interpolação
                        ' Eu estou aprendendo ' + s // usa concatenação

                    TEMPLATES STRINGS - Formatador de strings
                        ` Eu estou aprendendo ${s} `  // template string (com a crase) // simbolo placeholder ${n}
                    
                    AINDA PODEMOS USAR:
                        var s = "JavaScript"
                        s.length // Quantos caracteres a string tem
                        s.toUpperCase() // Pra deixar todas as letras MAIÚSCULAS
                        s.toLowerCase() // tudo em minúsculas
        */
    </script>

</body>
</html>
	 
	 
	 
	 
	 
	 <!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ex004</title>
    <style>
        body{
            font: normal 20pt arial;
        }
    </style>
</head>
<body>
    

    <script>
        var nome = prompt(`Qual é o seu nome? `); // ou window.prompt
        document.write(`Olá, <strong>${nome}</strong>! Seu nome tem ${nome.length} letras!</br>`); 
        document.write(`O seu nome em MAIÚSCULAS é ${nome.toUpperCase()}! </br>`);//o () chama o método, por isso não pode esquecer de colocar se não ele não executa a função! // writeln = quebra linha
        document.write(`O seu nome em minúsculas é ${nome.toLowerCase()}!`)
        //document.write(`<h1>Seu nome tem ${nome.length} letras!</h1>`); // s.length visto no ex003
        //incluimos a tag <h1> na linha docódigo. Até aonde eu entendi, toda a linha deve ser colocada dentro da crase quando a mesma for utilizada
            

        /*
            FORMATAÇÃO DE NÚMEROS
                var n1 = 123.7
                s.toFixed(2) // Para fixo com duas casas
                s.toFixed(2).replace('.',',') // trocar de lugar a primeira aspas simples pela segunda!
                
                > n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'})
                'R$ 1,234.70' // No node volta ao padrão, mas no navegador, ele converte direitinho, as se você quiser pode acrescentar o replace.
                > n1.toLocaleString('pt-BR', {style: 'currency', currency: 'USD'})
                'US$ 1,234.70'
                > n1.toLocaleString('pt-BR', {style: 'currency', currency: 'EUR'}).replace('.',',')
                '€ 1,234.70'
                // parte localizada = para localizar (parte seria parte do mundo, ou seja, pt-BR é para o Brasil) - {entre chaves vamos colocar os atributos, é 'meio que um OBJETO' - style: 'currency' = valor monetário - currency: 'BRL' = valor do Brasil / 'USD' = dólar / 'EUR' = Euro} <= Exemplo para falar de um salário
        */
    </script>

</body>
</html>
	       
	       
	
	

---------------------------------------------------------------------
   
	       
	       
	       -----------------------------
		Aula 7 – Operadores (Parte1)
	       -----------------------------

(Você já sabe como fazer cálculos usando JavaScript? Conhece os operadores aritméticos do JavaScript? Consegue entender a ordem de precedência dos operadores em JavaScript? Consegue utilizar os operadores de incremento (pré-incremento e pós-incremento) no JavaScript?)


> Guanabara ask...
------------------
       
	1 - Como é possível guardar um valor digitado num prompt() dentro de uma variável?
	
			DECLARANDO A VARIÁVEL NO INÍCIO DO CÓDIGO. EX:
			
				var nome = prompt(`Qual é o seu nome??`);
				
			DESSA MANEIRA, QUANDO VOCÊ DIGITAR O SEU NOME NO PROMPT QUE APARECER NA SUA TELA, ELE SERÁ ARQUIVADO NA VARIÁVEL "NOME" JÁ QUE FOI ASSIM QUE A DECLARAMOS!
			
			
	2 - Como fazer com que um número digitado num prompt() possa ser usado em cálculos?
	
			NÓS O CONVERTEMOS O PROMPT DE STRING PARA NUMBER, JÁ QUE TODO PROMPT POR REGRA RECEBE UM VALOR COMO STRING:
					
				var n1 = Number(prompt('Digite um número: ')); 
					ASSIM DEIXAMOS O JS DECIDIR SE SERÁ NÚMERO INTEIRO OU REAL, POIS NÃO O DECLARAMOS
						
							OU
							
				var n2 = Number.parseFloat(window.prompt('Digite outro número: ')); //Pode ser só prompt, sem o window
					ASSIM, JÁ DECLARAMOS QUE O VALOR RECEBIDO É REAL (OU parseInt, PARA NÚMEROS INTEIROS)
						
						
	3 - Como transformar um texto todo para letras MAIÚSCULAS?
	
			ADICIONAMOS ASSIM O CÓDIGO:
				
				n.toUpperCase()
						ou
				n.toLowerCase() 
						PARA DEIXAR TUDO EM minúsculas.
				
						
	4 - Como mostrar um número formatado como um valor monetário?
	
			ADICIONAMOS ASSIM O CÓDIGO:
				n.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'});
	       
	       
	       
	       
	       ************
	        OPERADORES
	       ************
	       
	       	> Aritméticos
	       	> Atribuição
	       	> Relacionais 
	       	> Lógicos
	       	> Ternário
	       	
	       	* Esses acima são só alguns exemplos.
	       	Outro exemplo é o typeOf, que te fala que tipo primitivo é o seu valor.
	       	
	       	
	       	
	       	=> Aritméticos:
	       	---------------
	       		
	       		Operadores binários (precisam de 2 operandos)
	       		
	       			+	5+2	=>	7
	       			-	5-2	=>	3
	       			*	5*2	=>	10
	       			/	5/2	=>	2.5	(para o JS)
	       			%	5%2	=>	1	(resto)
	       			**	5**2	=>	25	(potencia / surgiu nos ECMAScripts mais recentes)
	       			
	       		Ordem de Precedência = solução dos operadores =>
	       			
	       			Sempre da esquerda pra direita
	       			
	       				1º	( )
	       				2º	**
	       				3º	*, / e %
	       				4º	+ e -
	       				
	       		
	       	=> Atribuição:
	       	--------------
	       	
	       		Atribuição simples (*Não seja um prog ALFABETO* rs)
	       		
	       			var a	=  5+3		8
	       			var b	=  a%5		3
	       			var c	=  5*b**2	45
	       			var d	=  10-a/2	6
	       			var e	=  6*2/d	2
	       			var f	=  b%e+4/e	3
	       		
	       		Auto-atribuições (quando eu já dou o valor pra var)
	       			
	       			var n = 3		3 
	       			
	       			n = n + 4		7 <= deixa de valer 3 para valer 7 
	       			n = n - 5		2 <= deixa de valer 7 para valer 2
	       			n = n * 4		8 <= deixa de valer 2 para valer 8
	       			n = n / 2		4 <= deixa de valer 8 para valer 4
	       			n = n ** 2		16<= deixa de valer 4 para valer 16
	       			n = n % 5 		1 <= deixa de valer 16 para valer 1
	       			
	       			SIMPLIFICANDO 	(só vale se for para ele mesmo. Ex: n = n + 4. Se for n = x + 4 não pode > dará errado)
	       			
	       				n += 4
	       				n -= 5
	       				n *= 4
	       				n /= 2
	       				n **= 2
	       				n %= 5
	       				
	       	=> Incremento:
	       	--------------
	       			
	       		Já entendemos que:
	       		
	       			var x = 5
	       			
	       			x = x + 1	=>	x += 1		
	       			x = x - 1	=>	x -= 1	
	       			
	       			SIMPLIFICANDO
	       			
	       				x++				<= vai depender de que ordem você precisa:
	       				x--				Incremento ou Decremento
	       					ou
	       					
	       						++x		<= pré-incremento ou pré-decremento
	       						--x		
	       			
	       			   
	       
	       
---------------------------------------------------------------------	       
	       
	       
	       --------------------------------
		 Aula 8 – Operadores (Parte 2)
	       --------------------------------
       
       
       
> Guanabara ask...
------------------       
       
       
       ... continuando:
       		> Relacionais 
	       	> Lógicos
	       	> Ternário 
	       	
	       	
	       	
	       	
	       	
	       	
	       	
	       	
	       	
       
Módulo C: Entendendo o DOM
2 Aulas
Módulo D: Condições em JavaScript
5 Aulas
Módulo E: Repetições em JavaScript
5 Aulas
Módulo F: Avançando os estudos em JavaScript
5 Aulas
Teste JavaScript
