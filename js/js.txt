====> com Prof. Gustavo Guanabara do Curso em vídeo <====


*** NUNCA DIGA QUE VOCÊ É UM PROGRAMADOR EM HTML OU CSS. DIGA QUE VOCÊ USA ELES COMO FERRAMENTAS PARA CRIAR UM SITE, MAS NO CASO, VOCÊ PROGRAMA EM js. => desenvolve coisas em html e css.

A COMUNIDADE NÃO ACEITA BEM QUEM DIZ QUE PROGRAMA EM HTML OU CSS, ENTÃO NÃO FALE ISSO POIS AS PESSOAS PODEM TE JULGAR MAL!!!!!! *****

Sites/app que usam o JS:
- Google
- Youtube
- Linkedin
- Netflix
- Facebook
- Uber
- Paypal

Tecnologias:
* Jquery
* Angular
* React
* VueJS
* Electron
* Ionic
* Cordova

-------------------------------------------------------------------------------------------------------------------------------------------------
 * Introdução ao Curso *
-------------------------------------------------------------------------------------------------------------------------------------------------


> 1 Aula
	Introdução – JavaScript Moderno
	
	
*******************************************
   => Módulo A: Conhecendo o JavaScript
*******************************************

	>> 4 Aulas <<
	
	
	
		-----------------------------------------------
		 Aula 1 – O que o JavaScript é capaz de fazer?
		-----------------------------------------------
		
		
		${O QUE O JS FAZ?} = QUASE TUDO!!! é basicaente um client side!
		
		(Você sabe para que serve a linguagem JavaScript / ECMAScript? Sabe a diferença entre um cliente e um servidor para a Internet? Sabe para que servem as tecnologias HTML5, CSS3 e JavaScript? Consegue citar 4 sites que utilizam a linguagem JavaScript nos seus códigos?)
		
> COMO FUNCIONA:
		
		  cliente = usuário
		 servidor = quem fornece os dados/arquivos
		 
		CLIENTE X SERVIDOR  
		   |__________|
		         |
		      browser
		        url      - vai p/ a infraestrutura da internet
		         |
		      servidor   - banco de arquivos
		      
		      
	servidor = com sis op, fundamentalmente é como nossa máquina pessoal. 
	
		        
		=> O CLIENTE PRECISA DE DADOS DE UM SERVIDOR.
		=> qUANDO VOCÊ ACESSA O BROWSER E SOLICITA AO SERVIDOR UMA PÁGINA, VOCÊ ESTÁ PEDINDO DIRETORIOS, ARQUIVOS, ENFIM, (ESSES ARQUIVOS QUASE SEMPRE SÃO EM HTML) > o servidor te devolve a página solicitada como uma cópia (o servidor sabe através de diversos protocolos qual arquivo te enviar através do que você solicitou) > o seu browser recebe os arquivos do fornecedor e ele começa a montar a página pra você, fazer a interface dela. 
	
	
	
	> WEBSITE <
	 	
	 	ALÉM DOS SITES JÁ CITADOS ACIMA, QUE USAM O JS AINDA TEMOS MUITOS OUTROS, Amazon. com, IBM, sites do governo dos Estados Unidos, do governo do Brasil e etc. 
	 	
	 	
		O JS FUNCIONA EM CONJ COM OUTRAS 2 TECNOLOGIAS: 
		HTML + CSS (a partir da metafora da criação de um jornal: )
		
		- JORNALISTA = texto, conteúdo, imagens, midia, link = CONTEÚDO;
		
		- DESIGNER = pega tudo e deixa mais bonito, cores, fontes, deixa tudo mais atraente, afinal o conteúdo não se vende sozinho = DEIXAR ATRATIVO PARA A VENDA, INTERFACE;
		
		- PROGRAMADOR = CÉREBRO - vai cuidar da engenharia, onde entregar o jornal, verificar se entregou o jornal, segurança, etc. = ENGENHARIA DA PORRA TODA.
		 
		
		 - HTML = <h1>, <p>, <imag/>
		 - CSS = {border, background-color, margin}
		 - JS = {"hover"}
		 
		 
		 	--------------------
		 	| - HTML = CONTEÚDO |
		 	| - CSS = ESTILO    |
		 	| - JS = INTERAÇÃO  |
		        --------------------
		
-------------------------------------------------------------------------------------------------------------------------------------------------		
		
		
		----------------------------------
		 Aula 2 – Como chegamos até aqui?
		----------------------------------

(Você sabe qual foi a empresa a criar o JavaScript? Sabe qual é a diferença entre as linguagens Java e JavaScript? Sabe qual é a relação que existe entre as linguagens JavaScript e ECMAScript? Sabia que, por exemplo, o programa usado para acessar WhatsApp no computador é feito em JavaScript?)

(... Na aula passada => )

> Guanabara ask...
------------------

	1 - Diferença entre um cliente e um servidor da internet? 
			
			CLIENTE É O USUÁRIO, QUEM SOLICITA AS INFOS E O SERVIDOR É QUEM FORNECE O QUE FOI SOLICITADO PELO USUÁRIO, QUEM ENVIA UMA 				CÓPIA PARA O BROWSER SOBRE AS INFOS CONVOCADAS. O BROWSER ABRE AS INFOS (ARQUIVOS) PARA QUE O USUÁRIO POSSA "LÊ-LAS".
			
			
	2 - Para que serve HTML, CSS e JS? 
	
			HTML = CUIDA DO CONTEÚDO DA PÁGINA
			CSS = CUIDA DO ESTILO DE COMO O CONTEÚDO DO HTML SERÁ APRESENTADO PARA O USUÁRIO
			JS = CUIDA DA PARTE INTERATIVA COM O USUÁRIO (INTERAÇÃO, O CONTRÁRIO DE PÁGINA ESTÁTICA).
			
			
	3 - 4 sites que fazem o uso do JS?
			
			* YOUTUBE
			* GOOGLE
			* AMAZON
			* AMERICANAS.
			

${Evolução do JS}

(GUERRA FRIA)
 1970 +-
 
 - INTERNET
 - EUA = DARPA
  (ARPANET - Até chegar a "internet")
  varias universidades = ex: MIT
  
 1993 (TBL, no Cern)
  - html
  - tcp/ip
  - www
  
  
  > ncsa (mark endersen)
  - MOSAIC = 1º navegador
  
  1994
  - Jim clark + mark endersen = Netscape
  
  1995 (Brandon aik)
  - MOca
  
  - ao mesmo tempo nascendo o JAVA
  
  e lançaram (a Netscape) o JAVAScript numa jogada de marketing.
  
  1997
  Netscape padroniza a linguagem JS para não virar uma bagunça, pois no ano de 1995 a Microsoft (por ter olho grande e vendo o sucesso da coisa toda) cria o jScript.
  
  então a ECMA - europa (como a ISO nos EUA) é uma empresa de padronização cria o ECMAScript <= padronizando a linguagem.
  
  2002 - fim da treta entra Netscape e MIcrosoft
  Netscape fale pois os computs da microsoft já vinham com navegador intalado, (o IE - internet explorer)
  e assim os funcionários que eram da Netscape fundam o Mozilla
  que é o Firefox
  
  2008
  outra empresa vendo o sucesso e a evolução da internet
  cria o google chrome
  
  2009
  (com o chrome) surge o V8 - motor interno de JS muito podereso 
  motor por debaixo do capô que roda JS
   * Cada navegador te seu próprio motor:
    Firefox = SpiderMonkei
    Safari = nitro
    Opera = karakan
    Microsoft = Shacra
    
   o que torno o v8 muito importante é que ele gerava código git ou just-in-time = o que é muito importante*
   além de o v8 ser em código aberto/livre
 
 ENTÃO VAMOS LÁ: JÁ QUE O V8 É CÓDIGO ABERTO E SÓ RODA NO CHROME, EU POSSO PEGAR O CÓDIGO, ODIFICAR ELE PRA RODAR FORA DO CHROME: SERGE ENTÃO, EM 2010, O *** NodeJS ***
 
 2010
 NodeJS - uma máquina que roda JS fora do navegador (assim posibilitoo o JS rodar no servidor também)
 
 => ECMAScript - versão padronizada do JS
 	
 	1997 - versão 1.0 (JS 1.0 - padronizado pela ECMA)
 	
 	1998 - versão 2.0 (pequenas atualizações)
 	
 	1999 - versão 3.0 (compatibilidade com expressões regulares, bloco trycat para poder tratar erros que não existia nas versões anteriores - mas já existia nas liguagens C e JAVA)
 	
 	2009 - surge a verão 5 (pulando a 4 por causa da demora) que ficou conhecida por ES5 - essa versão mais popular de todas, compativel com quase todos os navegadores atuais (compativel com jason )e trouxe vários metodos para tratar a race
 	
 	2015 - ES6 (trouxe os declaradores let e const e também as strigs em templates - que vamos usar muito no curso)
 	
 	começa a sair um por ano e passa a se chamar pelo nome!
 	
 	2016 - ES 2016 - operador de exponensiação
 	
 	2017 - ES 2017 - compatibilidade com funções assincronas
 	
 	2018 - ES 2018 - novidades em expressões regulares (regrets) e possibilidades de promisses (promessas)
 	
 	
==> com a evolução do JS surgem muitas tecnologias:

(angular - google * react - facebook)

(jQuery - conj de bibliotecas - criado pela galera do Mozilla que facilitava muito o uso de interatividades em JS - não é um framework)

(angular - criado e mantido pelo google, facilita muito a craição de aplicações web - ling. enos imperativa. Mais declarativa - Mais sema=elhante ao sql para banco de dados)

(react - facebook = mais ou menos as mesmas funcionalidades do Angular mas tem algumas flexibilidades maiores, por exeplo o react native para criação de aplicações em celular)

(2014 - framework vue - ex-programador do googl
e - ele estava cansado de usar o angular)

(electron - mantido pelo github - especializado para a criação de interfaces gráficas)

(vizual studiocode - microsoft - foi feito em electron, bem como o whatsapp desktop, discord, slack)

(ionic - sdk pra poder criar aplicações para dispositivos móveis - ele usa o nodeJS para rodar o arquivo fora do navergador * vários acimausam o nodeJS também com a mesma finalidade * se baseava também numa versão antiga do JS chamada Phonegap que hoje é mantida pela APACHE. Ela evoluiu e se chama CORDOVA)

várias bibliotecas, frameworks, sdks, etc para a criação de jogos
 	
 
{class FazMerda(models.Model):
    def Delete_Everything:
        if js.txt is True:	
            js.txt.delete()
            
        else:
            pass} by Well



-------------------------------------------------------------------------------------------------------------------------------------------------


		 
	       ------------------------------------
		Aula 3 – Dando os primeiros passos
	       ------------------------------------
	       
(Quais são os melhores livros de JavaScript em Português? Onde ter acesso à documentação oficial do JavaScript em Português e Inglês? Quais são os requisitos de software para aprender a programar em JavaScript? Qual é o melhor editor para códigos JavaScript? Como instalar o Node.js no seu computador? Como configurar o Node.js? Para aprender JavaScript, é realmente necessário saber muito Inglês?Você está precisando de dicas para estudar e aprender de verdade?)	       


> Guanabara ask...
------------------

	      
	1 - Que empresa criou o JavaScript?
	
			A FINADA NETSCAPE.
			
			
	2 - JAVA e JavaSript tem alguma relação?
	
			NÃO, APESAR DE AMBAS TEREM CIDO CRIADAS A PARTIR DA LINGUAGEM C, A ÚNICA RELAÇÃO QUE ELAS TEM É QUE O JAVA DO JAVASCRIPT FOI APENAS UMA JOGADA DE MARQKETING DO BATISMO DO NOME, POR SER ALGO QUE JÁ VENDIA/FOI MUITO BEM ACEITO PELO MERCADO.
				
				
	3 - O que o ECMAScript tem a ver com o JavaScript?
	
			ECMAScript É A EMPRESA EUROPÉIA QUE PADRONIZOU O js.
			
			
	4 - Sabia que o programa Whatsapp desktop é criado em JavaScript?
			
			Sim, ASSIM COMO O DISCORD, SLACK, ENTRE TANTOS OUTROS.
			
			 
=> Como aprender?
	
	*Ver vídeos
	*treinar o pc
	*ler
	*anotar coisas
	*interagir com outras pessoas
	*pensar em projetos pessoais
	
	Livros :
	Guia definitivo de JS
	JS guia do programador
	guia mozilla ecma
	ecma site
	
=> Instalação do Node.JS

Preparando o ambiente de desenvolvimento, com:
	Google CHROME
	VS Code 
	NodeJS
	
	
	
-------------------------------------------------------------------------------------------------------------------------------------------------		
		
		
		
	   ----------------------------------------
	    Aula 4 – Criando o seu primeiro script
	   ----------------------------------------
	   
(Você já sabe diferenciar dentro do seu código, os trechos em HTML5, em CSS3 e em JavaScript? Sabe organizar as pastas do seu projeto dentro do Visual Studio Code? Sabe como testar se o Node.js está devidamente instalado? Já sabe utilizar os comandos alert, confirm e prompt do JavaScript?)	


> Guanabara ask...
------------------


	1 - Que livros/documentos foram recomendados na aula passada como bibliografia e base de leitura do curso?
	
			OS LIVROS: JAVASCRIPT, O GUIA DEFINITIVO e JAVASCRIPT: O GUIA DO PROGRMADOR e
			OS SITES OFICIAIS DO MOZILLA (MDN) e DO ECMASCRIPT.
			
						
	2 - Para aprender JS, precisamos saber inglês?
	
			AJUDA? COM CERTEZA! PRECISA? NÃO! hOJE EM DIA JÁ TEM MUITOS SITES, ARQUIVOS E ETC TRADUZIDOS PARA O PT.
			
			
	3 - Que dicas foram dadas para quem quer estudar, metódos de estudo?
	
			* ANOTE
			* PRATIQUE
			* DESENVOLVA SEUS PRÓPRIO PROJETOS
			* ESTUDE COM DUAS TELAS, ETC
			
			
	4 - Quais programas foram instalados para podemos fazer o curso com nosso ambiente de desenvolvimento de estudo montado?
	
			3 ARQUIVOS:
			 - Node.JS
			 - Google Chrome
			 - VS Code
			 
	

		${Nossos primeiros Scripts}		
	 
	 ...MAndando bala no VS code (criando as pastas e arquivos)
	 
	 - comandos basicos da página html;
	 - basico de css interno;
	 - 3 comandos em js:
	 	
	 	window.alert,
	 	window.confirm,
	 	window.prompt.
	 	
	 	
	 	<!DOCTYPE html> <!--html é uma linguagem de marcação/conteúdo-->
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meu primeiro programa</title>
    <style> /* css é uma linguagem de folhas de estilos */
        body{
            background-color: rgb(47, 47, 90);
            color: #ffffff;
            font: normal 20pt arial;
        }
        
        h1{
            color: rgb(199, 199, 41);
        }
    </style>
</head>

<body>
    
    <h1>Olá, mundo!</h1>
    <p>Já me livrei da maldição</p> <!--Geralmente o script ficará antes da tag </body> para que ele primeiro carregue o arquivo base e depois os scripts-->

    <script>
        window.alert('Minha primiera mensagem!');
        window.confirm('Está gostando do JS?');
        window.prompt('Qual o seu nome?');
    </script>

</body>
</html>


-------------------------------------------------------------------------------------------------------------------------------------------------

	 

*************************************************		
   => Módulo B: Comandos Básicos do JavaScript
*************************************************

       >> 4 Aulas <<
       
		- armazenar dados
		- tratamentos de dados
		- tipo primitivos
		- operações com dados
		
		
		
		
		
              ---------------------------------------
		Aula 5 – Variáveis e Tipos Primitivos
	      ----------------------------------------
	      
	      
(Você sabe o que são variáveis? Sabe declarar variáveis em JavaScript? Sabe quais são os tipos primitivos do JavaScript? Consegue entender o que significa colocar um valor null dentro de uma variável em JavaScript?)

> Guanabara ask...
------------------


	1 - Como gerenciar pastas no VS Code?
	
			SIM, COM FOLDER OU FILE
			
			
	2 - NodeJS ta instalado no seu pc? Pra que serve o NodeJS?
	
			SIM, ELE FAZ COM QUE POSSAMOS RODAM O CÓDIGO FORA DO BROWSER
			
			
	3 - SAbe identificar/diferenciar o HTML5, CSS3 e JS de um cód?
	
			SIM, O HTML ABRE O ARQUIVO COM <!DOCTYPE html> E FECHA COM </html>. O CSS PODE SER EM ARQUIVO INTERNO OU EXTERNO (INTERNAMENTE PODEMOS IDENTIFICÁ-LO ENTRE AS TAGS <style> e </style> E JS GERALMENTE VEREMOS ELE ANTES DA TAG </BODY>, ENTRE AS TAGS <script> e </script>)
			
			
			
	4 - Já sabe disparar um alertas, confirmação e pergunta?
			
			SIM, COM OS COMANDOS:
				EX - 
				
				window.alert('Seja bem vindo ao JS! ');
				confirm('Está gostando do Curso em Vídeo? ');
				prompt('Qual é o seu nome? ');
				
				
				
	
	=> Depois que eu dei os alerts, para onde foram as informações coletados do usuário? 
	
	==>> Onde os dados foram guardados?? <<==
	
	
 >  Explicou os comentários também como incluir com // e /* */  <
 
 	=> Explicando o conceito de variável usando uma metáfora de terreno onde eu não construi uma casa e sim um estacionamento onde pra cada vaga (seja pra carro, moto, caminhão ou bicicleta) foram delimitados os espaços e adicionando numeros (ou nomes) para podermos identificar, encontrar cada automóvel estacionado. Lembrndo que cada "vaga" teve um tamanho diferente já que os autompoveis não são todos do meso tamanho. (Os separamos em grupos de automóveis = a1 - a6, caminhão = c1 - c4 e motos = m1 - m8) 
 	Logo vaga é a variável
 	então a noenclatura ficou:
 	
 		 vaga a1 = carro1 (recece valor, recebe ou carro,moto ou caminhão) <=
 		         = carro2 (para colocar esse carro eu preciso tirar o carro1 da vaga)
 		         = null   (e se caso eu não queira mais aguardar mais carro nenhuma nessa vaga, eu coloco o comando null)
 		         
 		         Neste caso, aplicando para comput:
 		         
 		         - o terreno é a memória do comput e os carros são os dados.
 		         
 		         então a var recebe um nome (identificação) e atribuimos a ela um valor, ficando assim como no exemplo: (vale lembrar que as variáveis podem ter tamanhos diferentes. Seguem os exemplos - )
 		         
 		         var n1 = 8;       var s1 = "JavaScript";
 		         var n2 = 8.5;     var s2 = 'Curso em Vídeo';
 		         var n3 = 15;      var s3 = `Guanabara`; 
 		         
 Sobre os identificadores: 
 	Regras
 	------
 		> Podem começar com letra, $ ou _      =>  l1, $nome, _local
 		> Não podem começar com numeros        =>  1l, 1nome, 1local
 		> podemos usar letras e numeros        =>  medianota1e2
 		> podemos usar acentos ou simbolos     =>  média#semestre
 		> não podem ter eespaços               =>  media do semestre
 		> e não podem ser palavras reservadas  =>  var alert
 		
 	Dicas
 	-----
 		
 		> maiusculas e minusculas fazem diferenças
 		> nomes coerentes nas variaveis
 		> evite se tornar um "programados alfabeto" ou um "programador contador"
 		
 	tipos de dados (Data Types)
 	--------------
 	
 		> number: numero = 5, -12, 24
 			Infinity
 			NaN = (NotAndNumber)
 			
 		> string: cadeia de caraceteres (numeros de telefone e cpf são considerado strings pois não contém só numeros) = "George", 413.560.848-50, (11) 98758-8455
 		
 		> boolean: valores booleanos = true, false
 		
 		ainda temos:
 			
 			Null = Nulo 
 			Undefined = Indefinido
 			Object (Já que JS é uma ling. OO - Orientada a Objeto)
 				array (vetor)
 			Function (também é um tipo primitivo no JS já que ela também funciona no paradigma funcional e considerar uma function um tipo é algo muito interessante)
 			
 			podemos usar o typeof no JS pra saber qual é o tipo primitivo no node.
 		
 		         
	      			
	      
	      <!DOCTYPE html> <!--html é uma linguagem de marcação/conteúdo-->
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meu primeiro programa</title>
    <style> /* css é uma linguagem de folhas de estilos */
        body{
            background-color: rgb(47, 47, 90);
            color: #ffffff;
            font: normal 20pt arial;
        }
        
        h1{
            color: rgb(199, 199, 41);
        }
    </style>
</head>

<body>
    
    <h1>Olá, mundo!</h1>
    <p>Já me livrei da maldição</p> <!--Geralmente o script ficará antes da tag </body> para que ele primeiro carregue o arquivo base e depois os scripts-->

    <script> // Estamos inserindo a var
        var nome = window.prompt('Qual o seu nome?');
        window.alert('É um grande prazer em te conhecer, ' + nome + '!'); // simbolo de + se lÊ como concatenação.
    </script>

</body>
</html>



-------------------------------------------------------------------------------------------------------------------------------------------------

	      
	       -------------------------------
		 Aula 6 – Tratamento de dados
	       -------------------------------
	       
	       
(Você já aprendeu a manipular dados em JavaScript? Sabe como guardar o resultado de um prompt dentro de uma variável? Sabe converter String para Número em JavaScript? Consegue formatar um número para que ele se pareça com um valor monetário usando JavaScript?)

> Guanabara ask...
------------------


		1 - O que é uma variável?
		
				UM LOCAL DA MEMÓRIA ONDE GUARDAMOS INFOS.
				
				
		2 - Como declarar uma variável inteira ou real no JS?
		
				NO JS NÃO FAZ A DIFERENÇA ENTRE INT OU FLOAT (DIFERENTES DE ALGUMAS OUTRAS LINGUAGENS QUE PRECISAM SER DECLARADAS NO INÍCIO.) MAS CASO VOCÊ PRECISE CONVERTER UM NUMBER PARA UMA STRING, AI SERÁ NECESSÁRIO SABER DIFERENCIAR NÚMEROS REAIS DOS INTEIROS.
				
				
		3 - Quais são os tipos primitivos no JS?
		
				Um primitivo (valor primitivo, tipo de dados primitivo) é um dado que não é representado através de um Objeto e, por consequência, não possui métodos. (DEFINIÇÃO MDN)
				
				SÃO ELES:
				
					* STRING
					* NUMBER
					* BOOLEAN
					* NULL
					* UNDEFINID
					* Symbol (novo no ECMAScript 6)
					
					
		4 - O que significa colocar valor Null numa variável?VA
				
				VALOR NULL QUER DIZER NULO*
				
				
		
		
	 ${Manipulação de Dados}
	 
	 	O que é let, const, NaN?
	 	
	 
	 !DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meu primeiro programa</title>
    <style>
        body{
            background-color: rgb(47, 47, 90);
            color: #ffffff;
            font: normal 20pt arial;
        }
        
        h1{
            color: rgb(199, 199, 41);
        }
    </style>
</head>

<body>
    
    <h1>Olá, mundo!</h1>
    <p>Já me livrei da maldição</p>

    <script>
        var n1 = Number.parseFloat(window.prompt('Digite um número: ')); // <= Deixei essa linha com o Number.parseInt para ficar de exemplo // string - o prompt já entende, independente do valor que isso é uma string.
        var n2 = Number(window.prompt('Digite outro número: ')); // string // Não precisa ser Number.parseInt, pode ser soó parseInt (porém no JS atual eu posso colocar só Number(n) e eu deixo o JS decidir o que é: se o numero é inteiro ou real)
        var s = n1 + n2 
        // Tanto faz eu colocar window.alert como só alert
        //alert('A soma dos valores é ' + s) // <= temos que converter isso tudo para numero.
        // concatenação // Como forçar o JS a entender que isso é uma soma?
        // Mas o JS funciona assim: 
        // number + number = para adição (então com um number de um lado e um number do outro dará number),
        // string + string = para concatenação

        //utilizando template strings:
        alert(`A soma de ${n1} e de ${n2} é igual a ${s}`);

        /* 
        string > numero

            Usamos Number.parseInt(n)   ou <= para numeros inteiros => parse é de converter/passear *** NÃO SE ESQUEÇA: o JS é casesensitive então o N de number precisa ser maiusculo assim como o I do int e o F do float.
                   Number.parseFloat(n)    <= para numeros reias, com virgulas => na prog seria ponto (ponto flutuante ou float point)
                
        numero > string
            Usamos String(n)      ou
                   n.toString()     ficando assim:

                   alert('A soma dos valores é ' + String(s))    ou
                   alert('A soma dos valores é ' + s.toString())

                   FORMATANDO STRING ***
                        var s = "JavaScript"
                        ' Eu estou aprendendo s ' // não faz a interpolação
                        ' Eu estou aprendendo ' + s // usa concatenação

                    TEMPLATES STRINGS - Formatador de strings
                        ` Eu estou aprendendo ${s} `  // template string (com a crase) // simbolo placeholder ${n}
                    
                    AINDA PODEMOS USAR:
                        var s = "JavaScript"
                        s.length // Quantos caracteres a string tem
                        s.toUpperCase() // Pra deixar todas as letras MAIÚSCULAS
                        s.toLowerCase() // tudo em minúsculas
        */
    </script>

</body>
</html>
	 
	 
	 
	 
	 
	 <!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ex004</title>
    <style>
        body{
            font: normal 20pt arial;
        }
    </style>
</head>
<body>
    

    <script>
        var nome = prompt(`Qual é o seu nome? `); // ou window.prompt
        document.write(`Olá, <strong>${nome}</strong>! Seu nome tem ${nome.length} letras!</br>`); 
        document.write(`O seu nome em MAIÚSCULAS é ${nome.toUpperCase()}! </br>`);//o () chama o método, por isso não pode esquecer de colocar se não ele não executa a função! // writeln = quebra linha
        document.write(`O seu nome em minúsculas é ${nome.toLowerCase()}!`)
        //document.write(`<h1>Seu nome tem ${nome.length} letras!</h1>`); // s.length visto no ex003
        //incluimos a tag <h1> na linha docódigo. Até aonde eu entendi, toda a linha deve ser colocada dentro da crase quando a mesma for utilizada
            

        /*
            FORMATAÇÃO DE NÚMEROS
                var n1 = 123.7
                s.toFixed(2) // Para fixo com duas casas
                s.toFixed(2).replace('.',',') // trocar de lugar a primeira aspas simples pela segunda!
                
                > n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'})
                'R$ 1,234.70' // No node volta ao padrão, mas no navegador, ele converte direitinho, as se você quiser pode acrescentar o replace.
                > n1.toLocaleString('pt-BR', {style: 'currency', currency: 'USD'})
                'US$ 1,234.70'
                > n1.toLocaleString('pt-BR', {style: 'currency', currency: 'EUR'}).replace('.',',')
                '€ 1,234.70'
                // parte localizada = para localizar (parte seria parte do mundo, ou seja, pt-BR é para o Brasil) - {entre chaves vamos colocar os atributos, é 'meio que um OBJETO' - style: 'currency' = valor monetário - currency: 'BRL' = valor do Brasil / 'USD' = dólar / 'EUR' = Euro} <= Exemplo para falar de um salário
        */
    </script>

</body>
</html>
	       
	       
	
	

-------------------------------------------------------------------------------------------------------------------------------------------------
   
	       
	       
	       -----------------------------
		Aula 7 – Operadores (Parte1)
	       -----------------------------

(Você já sabe como fazer cálculos usando JavaScript? Conhece os operadores aritméticos do JavaScript? Consegue entender a ordem de precedência dos operadores em JavaScript? Consegue utilizar os operadores de incremento (pré-incremento e pós-incremento) no JavaScript?)


> Guanabara ask...
------------------
       
	1 - Como é possível guardar um valor digitado num prompt() dentro de uma variável?
	
			DECLARANDO A VARIÁVEL NO INÍCIO DO CÓDIGO. EX:
			
				var nome = prompt(`Qual é o seu nome??`);
				
			DESSA MANEIRA, QUANDO VOCÊ DIGITAR O SEU NOME NO PROMPT QUE APARECER NA SUA TELA, ELE SERÁ ARQUIVADO NA VARIÁVEL "NOME" JÁ QUE FOI ASSIM QUE A DECLARAMOS!
			
			
	2 - Como fazer com que um número digitado num prompt() possa ser usado em cálculos?
	
			NÓS O CONVERTEMOS O PROMPT DE STRING PARA NUMBER, JÁ QUE TODO PROMPT POR REGRA RECEBE UM VALOR COMO STRING:
					
				var n1 = Number(prompt('Digite um número: ')); 
					ASSIM DEIXAMOS O JS DECIDIR SE SERÁ NÚMERO INTEIRO OU REAL, POIS NÃO O DECLARAMOS
						
							OU
							
				var n2 = Number.parseFloat(window.prompt('Digite outro número: ')); //Pode ser só prompt, sem o window
					ASSIM, JÁ DECLARAMOS QUE O VALOR RECEBIDO É REAL (OU parseInt, PARA NÚMEROS INTEIROS)
						
						
	3 - Como transformar um texto todo para letras MAIÚSCULAS?
	
			ADICIONAMOS ASSIM O CÓDIGO:
				
				n.toUpperCase()
						ou
				n.toLowerCase() 
						PARA DEIXAR TUDO EM minúsculas.
				
						
	4 - Como mostrar um número formatado como um valor monetário?
	
			ADICIONAMOS ASSIM O CÓDIGO:
				n.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'});
	       
	       
	       
	       
	       ************
	        OPERADORES
	       ************
	       
	       	> Aritméticos
	       	> Atribuição
	       	> Relacionais 
	       	> Lógicos
	       	> Ternário
	       	
	       	* Esses acima são só alguns exemplos.
	       	Outro exemplo é o typeOf, que te fala que tipo primitivo é o seu valor.
	       	
	       	
	       	
	       	=> Aritméticos:
	       	---------------
	       		
	       		Operadores binários (precisam de 2 operandos)
	       		
	       			+	5+2	=>	7
	       			-	5-2	=>	3
	       			*	5*2	=>	10
	       			/	5/2	=>	2.5	(para o JS)
	       			%	5%2	=>	1	(resto)
	       			**	5**2	=>	25	(potencia / surgiu nos ECMAScripts mais recentes)
	       			
	       		Ordem de Precedência = solução dos operadores =>
	       			
	       			Sempre da esquerda pra direita
	       			
	       				1º	( )
	       				2º	**
	       				3º	*, / e %
	       				4º	+ e -
	       				
	       		
	       	=> Atribuição:
	       	--------------
	       	
	       		Atribuição simples (*Não seja um prog ALFABETO* rs)
	       		
	       			var a	=  5+3		8
	       			var b	=  a%5		3
	       			var c	=  5*b**2	45
	       			var d	=  10-a/2	6
	       			var e	=  6*2/d	2
	       			var f	=  b%e+4/e	3
	       		
	       		Auto-atribuições (quando eu já dou o valor pra var)
	       			
	       			var n = 3		3 
	       			
	       			n = n + 4		7 <= deixa de valer 3 para valer 7 
	       			n = n - 5		2 <= deixa de valer 7 para valer 2
	       			n = n * 4		8 <= deixa de valer 2 para valer 8
	       			n = n / 2		4 <= deixa de valer 8 para valer 4
	       			n = n ** 2		16<= deixa de valer 4 para valer 16
	       			n = n % 5 		1 <= deixa de valer 16 para valer 1
	       			
	       			SIMPLIFICANDO 	(só vale se for para ele mesmo. Ex: n = n + 4. Se for n = x + 4 não pode > dará errado)
	       			
	       				n += 4
	       				n -= 5
	       				n *= 4
	       				n /= 2
	       				n **= 2
	       				n %= 5
	       				
	       	=> Incremento:
	       	--------------
	       			
	       		Já entendemos que:
	       		
	       			var x = 5
	       			
	       			x = x + 1	=>	x += 1		
	       			x = x - 1	=>	x -= 1	
	       			
	       			SIMPLIFICANDO
	       			
	       				x++				<= vai depender de que ordem você precisa:
	       				x--				Incremento ou Decremento
	       					ou
	       					
	       						++x		<= pré-incremento ou pré-decremento
	       						--x		
	       			
	       			   
	       
	       
-------------------------------------------------------------------------------------------------------------------------------------------------	       
	       
	       
	       --------------------------------
		 Aula 8 – Operadores (Parte 2)
	       --------------------------------
       
       
       
(Você já conhece os operadores relacionais e os operadores lógicos em JavaScript? Sabe a diferença entre usar = ou == ou === em JavaScript? Conhece a ordem de precedência dos operadores do JavaScript? Sabe como usar o operador ternário para atribuições em JavaScript?)



       
> Guanabara ask...
------------------       
       

	1 - Pra que serve o simbolo de porcentagem % no JS? Seria pra calcular %?
	
			PARA DAR O VALOR DO RESTO DE UMA DIVISÃO
			
	
	2 - 6 + 4 / 2 é igual a 5 ou a 8?
	
			8!!!!! => COMO VISMOS: 6 + (4 / 2) = 6 + 2 = 8 ✓
			
	
	3 - Se um variável n esttá valendo 10 e executamos um n+=5, que será o seu novo valor?
	
			n = 10
			
			n+=5, é o mesmo que => n = n + 5 => n = 10 + 5, que é o valor de 15!
			
			n passa a valer 15 ✓
			
	
	4 - O que acontece quando colocamos o valor ++ e -- ao lado de uma variável??
			
			AUMENTAMOS 1 OU DIMINUIOS 1, ISSO TERÁ DIFERENÇA SE OS SINAIS FOREM APLICADOS ANTES OU DEPOIS DA VALERIÁVEL (++n ou n++, assi como --n ou n--)

       
       
       
       ****************
       ... continuando:
       ****************
       
       		[ > Relacionais 
	       	  > Lógicos
	       	  > Ternário ]
	       	
	       	
	       	=> Relacionais:
	               ----------------
	               
	               > maior
	               < menor
	               >= maior ou igual que 
	               <= menor ou igual que
	               == igual
	               != diferente		==>> o resultado sempre será um valor booleano = verdadeiro ou falso (true or false)
	               			
	               			==>> Quando tivermos na mesma linha operadores aritméticos e operadores relacionais, 1º resolvemos os aritméticos e depois os relacionais.
	               			
	               
	               	5 > 2	true
	               	7 < 4	false
	               	8 >= 8	true
	               	9 <= 7	false
	               	5 == 5	true
	               	4 != 4	false
	       	
	       	
	       	* Identidade * (ou operador de igualdade restrita)
	       	
	       	5 == 5	=> true
	       	5 == '5' => true 	(isso por que ele - os sinais de igualdade - não testa o tipo, então ao invés de intender como string, entenderá como number.)
	       	5 === '5' => false	(como os 3 sinais de = ele testará se o eles são do mesmo valor e do mesmo tipo, ou seja, se eles são exatamente identicos. Sendo assim: false! E 5 === 5 => true, são identicos.)
	       	=> Ou desigual restrito 5 !== 5 (são de tipos diferentes.)
	       	
	       	Ex:
	       		
	       		> var x = 5
					undefined
				> var y = '5'
					undefined
				> typeof x
					'number'
				> typeof y
					'string'
				> x == y
					true
				> x === y
					false
				> x != y
					false
				> x !== y
					true
					
					
			
			
			=> Lógicos:		
			-----------
			
				!	Não 	- negação   (operador unário)
				&&	E	- cojunção  (binário)
				||	Ou	- disjunção (binário)
	       	
	       	
	       	! true  => false
	       	! false => true
	       	
	       	
	       	true   &&  true  => true
	       	true   &&  false => false
	       	false  &&  true  => false
	       	false  &&  false => false
	       	
	       	
	       	true   ||  true  => true
	       	true   ||  false => true
	       	false  ||  true  => true
	       	false  ||  false => false
	       	
	       	Ex:
	       	
       			> var a = 5
					undefined
				> var b = 8
					undefined
				> true && false
					false
				> true && true
					true
				> false || false
					false
				> true || true
					true
				> false || true
					true
				> a > b && b % 2 == 0 ***
					false
				> a <= b || b / 2 == 2
					true
					
					*** IMPORTANTE *** 
						
						NA OPERAÇÃO ACIMA, A ORDEM DE RESOLUÇÃO É => 
					
					1 - OP. ARITMÉTICOS	((), **, /, ...) na ordem que já sabemos.
					2 - OP. RELACIONAIS	(>, <, >=, <=, ...) não tem ordem certa, resolvemos os que aparecerem primeiro por ordem de precedência, da esquerda pra direita.
					3 - OP. LÓGICOS	(!, &&, ||) <= nessa ordem.
					
					
						E SE TIVERMOS MAIS DE UM OPERADOR LÓGICO NA MESMA OPERAÇÃO, A ORDEM DE RESOLUÇÃO É = >
					
					1 - !  Não
					2 - && E
					3 - || Ou
       		
       		
       		=> Ternário:
       		------------
       		
       			? :	dentro de uma mesma expressão (ternário por ter 3 partes)
       			
       			teste	?	true	:	false
       			
       		Ex:
       			
       			media >= 7	? 	'aprovado'	:	'reprovado'
       			
       			
       			=> ENTÃO É UM TESTE QUALQUER E O QUE ACONTECERÁ SE: 
       			
       			1 - ? TESTE FOR VERDADEIRO e
       			2 - : TESTE FOR FALSO
       			
       			
       		Ex:
       		
       			> var media = 5.5
					undefined
				> media > 7 ? "aprovado" : "reprovado"
					'reprovado'
				> media += 3
					8.5
				> media > 7 ? "aprovado" : "reprovado"
					'aprovado'
					
					
			Outro Ex:
			
				> var x = 8
					undefined
				> var res = x % 2 == 0 ? 5 : 9 ****
					undefined
				> x
					8
				> res
					5
				> var idade = 19
					undefined
				> var r = idade >= 18 ? 'MAIOR' : 'MENOR'
					undefined
				> r
					'MAIOR'
					
					
					**** NA OPERAÇÃO ACIMA:
					
						> resolvendo =>    
								var x = 8
								res = x % 2 == 0 ? 5 : 9
							
				(res = x % 2 == 0) ------- OITO RESTO DOIS IGUAL A ZERO? SIM! OITO DIVIDO POR DOIS É QUATRO QUE SOBRA ZERO!
					|	   
					|___________________ x % 2 = 8 % 2 => 0
						
							     0 == 0 => verdade	------- ZERO É IGUAL A ZERO
								 
								 (? 5 : 9) ----------- SENDO VERDADEIRO X RECEBE 5!
									   	
									   	
									   	
									         -----------------
									        | - então, x = 5  |
									         -----------------
					
       			
       	ENTÃO:
       	
       		NA ORDEM DE PRECEDÊNCIA SOB RESOLUÇÃO DE OPERAÇÕES:
       		
       			1 - ARITMÉTICOS
       			2 - RELACIONAIS
       			3 - LÓGICOS
       			4 - TERNÁRIO
       
       
       
-------------------------------------------------------------------------------------------------------------------------------------------------

	 

**********************************		
   => Módulo C: Entendendo o DOM
**********************************

       >> 2 Aulas <<
       
		- Introdução ao DOM
		- Eventos DOM
		
		
			=> Entendendo o que é o Document Object Movel ou DOM, vertente web para qual o JS foi criada. Uma poderosa ferramenta que tá dentro do navegador, um conjunto de objetos do JS para o tratamento de componentes visuais, para criar aplicações mais "bonitinhas". 
			=> Aprender a fazer uma árvore DOM do site.
			=> Manipular árvores DOM de qualquer site.
		
		
              -----------------------------
		Aula 9 – Introdução ao DOM
	      ------------------------------   
       

(Você sabe o que significa a sigla DOM? Sabe para que serve o Document Object Model? Sabe como criar uma árvore DOM para o seu site? Sabe como usar o JavaScript para manipular o DOM? Sabe para que servem os elementos Parent e Child em um DOM? Sabe utilizar os métodos getElementByTagName, getElementById, getElementByName, getElementByClassName, querySelector de acesso ao DOM no JavaScript?)
       
       

> Guanabara ask...
------------------

		1 - Qual a diferença entre usar =, ==, === no JS?
		
				= significa 'recebe'. Então uma x variável recebe tal valor;
				== isso significa 'igual', mas neste caso não diferencia o tipo primitivo;
				=== isso significa 'igualdade restrita', ou seja será realmente igual se valor e tipo priitivo forem iguais.
				
				
		2 - Em uma mesma expressão, temos os operadores || e &&. Qual deles é resolvido primeiro?
		
				o operador && e depois o ||. No caso, tendo o !não, este é primeiro em seguida do && e por fim o ||.
				
				
		3 - Sabe usar o operador ternário para colocar um entre dois valores em uma variável?
		
				Sim! 
				EX: 
					var idade = 17
					
					idade >= 18 ? "Maior de idade" : "Menor de idade"
					
					   
		
		
	${Entendendo o DOM:}
	
		=>> O que é o DOM???
		
					DOM é um acrônimo para Document Object Model (Modelo de Objetos pra Documentos). Basicamente é um conjunto de objetos dentro do seu navegador que vai dar acesso aos componente internos do seu website. O Dom não funciona dentro do Node.JS, por exemplo, o dom está presente quando eu estou rodando o JS dentro do meu navegador. 
					
		=>> Árvore DOM
				
				É muito importante sabermos fazer a árvore DOM do nosso site. Ela começa da raiz, e a raiz do navegador nós chamamos de window. Dentro do window temos vários objetos (3 exs: [location - diz qual é a localização da sua página / qual é a URL da sua página / qual é a página atual / qual foi a oáfina anterior], [document - documento atual / página atual], [history - que vai guardando de onde você veio / pra onde você vai = isso facilita muito a navegaçõ dentro do seu site])
		Dentro de document temos html, que é exatamente a parte html do meu site.
		Dentro de html, temos basicamente dois filhos: head e body.
		- Dentro de head temos meta, title, etc.
		- Dentro de body (para o documento que foi criado para essa aula) temos h1, p, p, div.
		
		- Dentro do 2º parágrafo temos strong e em que são child de p.
		
				{A árvore DOM é uma árvore hierarquica, basicaente como uma árvore genealógica, onde o que vem abaixo são filhos e os acima são pais (child e parent). O único que não é filho é a window, todo o resto em algum momento pode ser pai ou filho de alguém.}
				
				Tem muitas maneiras de acessar os elementos da árvore. => Elemento é qualquer coisa que apareceu na árvore DOM. 


							      ---------
								window
							      ---------
							     	  | 
					    _____________________|_______________________
					    |			  |			  |
					----------	     ----------	      ---------
					 location	      document	               history
					----------	     ----------	      ---------
								  |
							       ------
							        html
							       ------
							          |
							__________|___________
						       |                      |
						    ------          	     ------
						     head      	      body
						    ------		     ------
						       |			|
                                            _________|_________           ___|______________________________
					     |			 |	    |         |	   |		|
					   ------            -------     ----       ---         ---        -----
					    meta              title       h1	       p	   p          div
					   ------            -------     ----       ---         ---        -----
												   |
												--------
												 strong
												--------
												
												
												
			E ai nós precisamos selecionar esses elementos para poder navegar dentro da minha árvore DOM:
			
			5 exs:
			
			podemos acessar => 
			
			- por marca (por tag);
				getElementsByTagName()[] <= mais de um objeto, pois elements está no plural, sendo assim e o indico dentro dos colchetes.
			- por id;
			- por nome;
			- por classe;
			- por seletor (css que é mais recente);



<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Primieros passos com o DOM</title>
    <style>
        body{
            background-color: #4a4c8a;
            color: #ffffff;
            font: normal 18pt arial;
        }
    </style>
</head>

<body>
    <h1>Iniciando estudos com o DOM</h1>
    <p>Aqui vai o resultado</p>
    <p>Aprendendo a usar o <strong>DOM</strong> em <em>JavaScript</em></p>
    <div id="msg">Clique em mim</div>

    <script>
        
        
        // window.document.write('Olá, Mundo!') fomos por JS, por DOM add componentes *Explicação Guanabara* Não é a melhor aneira de add componetes mas é a mais simples!!

        
        
        /* => Não preciso usar o window. document (pode ser só document) 

        Assim podemos obter infos/configs da página:
            podemos: window.document.write(window.document.charset) => mostrará qual o charset da pág. (que nesse caso mostrará o UTF-8)
                     window.document.write(window.navegator.appName) => mostrará em qual navegador o site está rodando.
                     window.document.write(window.document.URL) = > mostrará qual URL, qual o endereço da pág.(que nesse caso é http://127.0.0.1:5500/aula9/ex005.html)
         */


         
         
         
         /* SELECIONANDO OBJETOS
            	
            	- por marca (tag);
            	- por id;
		- por nome;
		- por classe;
		- por seletor (css que é mais recente);

            
            
            
            
            => getElementsByTagName()

                var p1 = window.document.getElementsByTagName('p')[0] <= dentro do parenteses eu coloco qual tag eu quero acessar;
                    
                    tudo o que estiver dentro de colchetes acessará cada linha da tag
                    e a contagem começa do 0, ou seja, a linha ou a 1ª tag <p> será 0, a 2ª tag <p> será 1 e assim sucessivamente.
                
                document.write(p1.innerText) <= p1 - variável declarada. <= innerText - seleciona o texto que está dentro da tag
                document.write(p1.innerHTML) <= seleciona a tag formatada <= podemos ainda colocar uma concatenação p/ ficar mais claro

                        podemos ver melhor a diferença se criarmos um alert:
                            window.alert(p1.innerText) <= pegas as filhas sem formatação (pega só o texto)
                            window.alert('Está escrito assim: ' + p1.innerHTML) <= pega inclusive as tags filhas

                        PODEMOS TAMBÉM:
                            FAZER ALTERAÇÕES. EXS:

                                p1.style.color = 'blue' <= É extamente o que fizemos no site do google para alterar o fundo na 1ª aula
                                                            (MANIPULAMOS  O   D O M!!! )
                                
                                var corpo = window.document.body <= criamos a variável, depois
                                corpo.style.background = 'black'

            
            
            => getElementById() <= aqui não tem plural no element pois o ideal é que cada elemento tenha um id diferente
                
                Na tag div adicionamos um id
                (id = #)
                (class = .) => classe


                    Declaro a variável:
                        
                        var d = window.document.getElementById('msg') 
                        
                        ==>> lembrando que a var eu não posso colocar 'div' pois div é uma palavra reservada.
                        
                        
                        PODEMOS TAMBÉM:
                            
                            FAZER ALTERAÇÕES. EXS:

                                d.style.background = 'green'
                                d.innerText = 'Estou aguardando...' <= Novamente, originalmente a tag div estava 'clienque em mim', mas eu mandei modificar por JS através do DOM com o innerText, nessa linha de código.

                                PODEMOS AINDA USAR O COMANDO COMPLETO, CASO VOCÊ VÁ USÁ-LO UMA VEZ SÓ:

                                    window.document.getElementById('msg').innerText = 'Olá, mundo!' 
                                        (porém assim, a linha fica muito grande, por isso o Guanabara declara a variável e por ela aplica as modificações.)
            
            
            
            
            => getElementsByName()

                Na tag <div> ao invés de colocar id, eu coloco 'name' e será da mesma maneira: 

                    var d = document.getElementsByName('msg')[0] <= neste caso 'Elements' está no plural então eu devo colocar entre os colchetes a qual tag eu estou e referindo (a 1, a 2, 3, etc. => lembrando que a contagem começa do 0. * COMO NOS VETORES E MATRIZES DO C++ *)  
                    d.innerText = 'Olá, mundo!'

            
            
            
            => getElementsByClassName()

                    Assim será como por nome (getElementsByName())

                        Na tag <div> ao invés de colocar id, eu coloco 'class' e será da mesma maneira: 

                        var d = document.getElementsByClassName('msg')[0] 
                        d.innerText = 'Olá, mundo!'

            
            
            
            => geElementByQuerySelector()

                    Na tag <div> voltamos a colocar id (ou class, como preferir)
                        
                        var d = document.querySelector('div#msg') => id - '#' => class - '.'
                        d.style.color = 'blue'

                    

         */
         
        var corpo = window.document.body
        var p1 = window.document.getElementsByTagName('p')[1]
        var d = document.querySelector('div#msg') // => id - '#'' => class - '.'
        d.style.color = 'blue'
    </script>
</body>
</html>


-------------------------------------------------------------------------------------------------------------------------------------------------


	       -----------------------
		Aula 10 - Eventos DOM
	       -----------------------
	       
	          
(Você já entendeu como funciona o DOM com JavaScript? Sabe criar funções em JavaScript? Consegue ligar uma função a um evento em um formulário HTML5 usando JavaScript? Sabe como pegar valores dentro de caixas de texto e fazer cálculos com eles?)


	       
> Guanabara ask...
------------------

		1 - O que significa a sigla DOM? sabe pra que serve o DOM?
		
				DOM - Document Object Model (Modelo de Objetos para DOcumentos). O dom serve para manipular objetos em uma página dando acesso aos componentes internos desta.
				
				
				(Definição no MDN => O Modelo de Objeto de Documento  (DOM) é uma interface de programação para documentos HTML, XML e SVG . Ele fornece uma representação estruturada do documento como uma árvore. O DOM define métodos que permitem acesso à árvore, para que eles possam alterar a estrutura, estilo e conteúdo do documento. O DOM fornece uma representação do documento como um grupo estruturado de nós e objetos, possuindo várias propriedades e métodos. Os nós também podem ter manipuladores de eventos que lhe são inerentes, e uma vez que um evento é acionado, os manipuladores de eventos são executados. Essencialmente, ele conecta páginas web a scripts ou linguagens de programação.)
				
				Nada mais é do um facilitador dentro do meu navegador, dentro do html5 para dar acesso aos elementos diretamente pro JS. Sem o DOm nós teríamos muita dificuldade para cessar os elementos da nossa página. 
				
				
				
		2 - Sabe montar a árvore DOM de um site simples?
		
				Sim, inclusive tenho ela montada na aula 9, mas basicamente temos: window -> document -> html -> body -> p -> strong <= Pode ser o exemplo de uma 'família DOM'
				
				
				
		3 - Sabe o que são os elementos Parent e os elementos Child de uma árvora DOM?
		
				Como na questão acima, o child vai ser o que está abaixo na árvore e parent o que está em cima. Em algum momento algum elemento será pai ou filho exatamente como uma árvore genealógica: UMA ÁRVORE HIERARQUICA.
				
				
				
		4 - Quais são os 5 principais métodos de selecionar elementos DOM dentro do JS?
		
				- por marca;
				- por id;
				- por nome;
				- por classe;
				- por seletor.



		${O que é um evento DOM?}
		
			[É tudo o que possa acontecer com um elemento.]
			
						
			Um exemplo disso são eventos com o mouse:
			
				=>> Vamos aplicar tudo a uma tag div com as seguintes formatações <<=
				
				<style>
					div#area{
					    font: normal 15pt arial ;
					    background: green;
					    color: white;
					    width: 200px;
					    height: 200px;
					    line-height: 200px;
					    text-align: center;
					}
			    	</style>
			    	
				
				ENTÃO, para o : 
			
			- mouseenter: quando o mouse entrar na div vai disparar o 'mouseenter' (ele entrou na div)
			- mousemove: continuar movendo o mouse por dentro da div.
			- mousedown: cliquei e segurei, eu tenho o disparo do 'mousedown'
			- mouseup: quando eu soltar o click, disparamos o evento mouseup'
			- click: quando eu clico rápido (clico e solto rápido o mouse)
			- mouseout: quando o mouse sair do 'perimetro' da div, acionamos o 'mouseout'
			

				Mas para dispararmos um evento, antes precisamos entender o que é uma função ou funcionalidade:
				
				Conjunto de linhas de código que serão executadas só quando o evento ocorrer. eX: digitaremos 10 linhas de código.
				
				
				
O bloco será nomeado com uma FUNCTION ação (parâmetros) { <= geralmente a nomeação da função é com uma ação que ela poderá executar.
			     ----------------------------    ELAS SERÃO COLOCADAS DENTRO DE UM BLOCO, com abre e fecha chaves
						  |	  }
						  |
                             -------------------------							  
				podemos ainda colocar 
				alguns parâmetros para 
				a função.
			     ---------------------------
			     
			     Então, ficaria: 
			     
				     function ação (param){
				     	linhas de código
				     }

		
		Então:
		------
			
			1 - Precisamos desixar tudo em bloco entre os sinais de chaves. => {}
			
			2 - Precisamos nomear um bloco com uma "function" = função. (No JS existem blocos de funcção anônima sem nome para a função, mas geralmente precisamos dar a elas nomes, quase sempre com as ações que elas deverão executar.) => function {}
			
			3 - Nomear a function com uma ação => 
				
				function ação(){
					>BLOCO DE CÓDIGO<
				}
				
			4 - Opcionalmente podemos colocar parâmetros dentro desses parentêses. (1 ou mais deles)
			
			
			
			
			
			
			
****************Inserido no HTML***************

			
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eventos DOM</title>
    <style>
        div#area{
            font: normal 15pt arial ;
            background: green;
            color: white;
            width: 200px;
            height: 200px;
            line-height: 200px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div id="area" onclick="clicar()" onmouseenter="entrar()" onmouseout="sair()"> /* NO HTML, FALAMOS A FUNÇÃO NA TAG QUE QUEREMOS E EM 												SEGUINDA O QUE ELA IRÁ FAZER (A NOMEAMOS). DEPOIS, NA TAG 												SCRIPT ABRIMOS UM BLOCO ENTRE {} (COMO VIMOS NA EXPLICAÇÃO 												ACIMA) COM UMA FUNCTION + O NOME DA AÇÃO ATRIBUIDO NA TAG 												PARA REFERENCIÁ-LA E SABER ONDE ELA ESTÁ INTERAGINO (COMO 												NOMEAMOS ELA NESSA TAG, ENTÃO FICARIA 
    											function clicar(){bloco de código}). ENTÃO ASSIM NOS 											CONFIGURAMOS (DISPARAMOS O MÉTODO) - ESSE MÉTODO SÓ IRA 												CHAMAR (IRÁ DISPARAR) QUANDO EU CHAMR O MÉTODO, OU SEJA 												(NESSE CASO), QUANDO EU "CLICAR". E DENTRO DO BLOCO, 											CONFIGURAMOS O QUE IRÁ ACONTECER QUANDO EU CLICAR.
    											PARA FAZER A CONFIG DO BLOCO EU PRECISO VER A MINHA ÁRVORE 												DOM (NESSE CASO, É UMA div DE id area)*/
        
        Interaja...
    </div>

    <!-- Os eventos DOM podem ser escritos tanto no html como JS -->
    <!-- Nesse formato, estamos aplicando no html -->

    <script>
        var area = window.document.getElementById('area') // Não é o melhor jeito pois teriamos um problema com a memória aqui, mas assim a var 									atenderia a todas as functions.
        
        // Guanabara colocou var a, mas ele disse que poderíamos colocar var area sem problemas.

        /*
                ALERTAAAAAA

                    o JS não apreseta erros. O que fazer nesse caso, se você possivelmente esqueceu uma letra ou não fechou um parenteses?????
                    > Entre no Browser > clique com o botão direito e selecione inspecionar > lá no console te apresentará o erro!!!!! UFFA...
                    (Ele te apresentará em que linha está o erro e provelmente o erro estrá naquela linha pra cima, no código.)
        */

        function clicar(){
            area.innerText = 'Clicou!'
            area.style.background = 'red'
        }
        function entrar(){
            area.innerText = 'Entrou!'
        }
        function sair() {
            area.innerText = 'Saiu!'
            area.style.background = 'green'
        }
    </script>

</body>
</html>




****************Inserido no JS***************

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eventos DOM</title>
    <style>
        div#area{
            font: normal 15pt arial ;
            background: green;
            color: white;
            width: 200px;
            height: 200px;
            line-height: 200px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div id="area">
        Interaja...
    </div>

    <!-- Os eventos DOM podem ser escritos tanto no html como JS -->
    <!-- Nesse formato, estamos aplicando no JS -->

    <script>
        var area = window.document.getElementById('area') /* LEMBRANDO QUE ESTAMOS USANDO A ARVORE DOM. ASSIM ENTEDEMOS QUE getElementById* ESTÁ 									DENTRO DE document (OU É FILHA DE document) QUE ESTÁ DENTRO DE window**. 
        
        							* getElementById está no singular e por isso não precisamos usar colchtes!
        							** Não precisamos usar window sempre. O código pode começar por  									document.getElementById('area') sem problemas, mas como estamos aprendendo, 									colocamos para podermos ver a árvore inteira. */
        							
        // Guanabara colocou var a, mas ele disse que poderíamos colocar var area sem problemas.
        
        area.addEventListener('click', clicar) 	// *OUVIDORES* VAI PRESTAR ATENÇÃO EM CADA EVENTO. O HTML FICA LIMPO E O DOM TODO NO JS. É 								QUASE A MESMA COISA DO FUNCTION: FALAMOS A FUNÇÃO QUE ELE VAI FAZER E DEPOIS O NOMEAMOS. 								NA FUNCTION NO JS, O REFERENCIAMOS COM O NOME QUE JÁ FOI DADO PARA DISPARARMOS AS CONFIGS 								QUE COLOCAMOS NO BLOCO. E AI, FICA A ENCARGO DO JS FAZER A LIGAÇÃO DO HTML COM JS ATRAVÉS 								DESSAS 3 LINHAS QUE COLOCAMOS OS OUVIDORES (addEventListener).
        area.addEventListener('mouseenter', entrar)
        area.addEventListener('mouseout', sair)

        function clicar(){
            area.innerText = 'Clicou!'
            area.style.background = 'red'
        }
        function entrar(){
            area.innerText = 'Entrou!'
        }
        function sair() {
            area.innerText = 'Saiu!'
            area.style.background = 'green'
        }
    </script>

</body>
</html>



outro ex:

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Somando Números</title>
    <style>
        body{
            font: normal 18pt arial;
            background: rgb(139, 139, 185);
        }
        input{
            font: normal 18pt arial;
            width: 100px;
        }
        div#res{
            margin-top: 20px;
            color: white;
            border: solid 2px #000000;
            box-shadow: 1px 1px 4px rgba(0,0,0, .3);
            padding-left: 5px;
            width: 340px;

        }
    </style>
</head>
<body>
    <h1>Somando Números</h1>
    <input type="number" name="txtn1" id="txtn1"> + 	<!--Não preciso nem abrir a tag. Nessa ide, se eu digitar 'input', ela já abre pra mim a 								tag com tudo o que a tag input já deve ter: type, name e id-->
    <input type="number" name="txtn2" id="txtn2">
    <input type="button" value="somar" onclick="somar()">
    <div id="res"><strong>Resultado</strong></div>
    <script>
        function somar() {
            var txtn1 = window.document.getElementById('txtn1')
            var txtn2 = window.document.querySelector('input#txtn2')
            var res = window.document.getElementById('res')
            var n1 = Number(txtn1.value)
            var n2 = Number(txtn2.value)
            var s = n1 + n2
            res.innerHTML = `<em>A soma de ${n1} + ${n2} é igual a <strong>${s}</strong></em>!` // STRING INTERPOLADA QUANDO ESTÃO DENTRO DE 														CRASES.
        }
    </script>
</body>
</html>

			


-------------------------------------------------------------------------------------------------------------------------------------------------


****************************************		
   => Módulo D: Condições em JavaScript
****************************************


	>> 5 Aulas <<

		- Aula 11 – Condições (Parte 1)
		- Aula 12 – Condições (Parte 2)
		- Exercícios JavaScript (Parte 1)
		- Exercícios JavaScript (Parte 2)
		- Exercícios JavaScript (Parte 3)
		
		
				=> Condições simples (if)
				=> Condições compostas (if/else)
				=> Condições aninhadas (encadiando multiplas funções - elseif)
				=> Condições multiplas (switch/case)
				=> Exercícios propostos
		


		-------------------------------
		 Aula 11 - Condições (Parte 1)
		-------------------------------


(Você sabe usar o comando if no JavaScript? Sabe diferenciar condições simples e condições compostas? Sabe como criar uma condição usando JavaScript? Sabe como instalar e configurar a extensão Node Exec no Visual Studio Code?)


> Guanabara ask...
------------------

		1 - Consegue citar 3 eventos que podem acontecer com elementos DOM de um site?
		
			Podemos usar os exemplos da aula, que foram eventos com o mouse para clicar, para sair do perimetro demarcado com a tag <div> e quando entrava no perimetro. (click, onmouseenter e onmouseout)	
		
		
		
		2 - O que é uma função? Como criar funções em JS?
		
				(Definição do MDN: "Uma função é um procedimento de JavaScript - um conjunto de instruções que executa uma tarefa ou calcula um valor. Para usar uma função, você deve defini-la em algum lugar no escopo do qual você quiser chamá-la.")
				
				=> Função é como fazemos a interação com os elementos da página e o usuário. Ele sempre estará assim:
				function ação(pode haver parâmetros){
					Bloco de código com a config deo que ele irá fazer.
				}
		
		
		
		3 - Sabe como pegar os valores de caixa de texto e fazer cálculos com eles?
		
				Sim, assim que o colhermos do usuário, o transformamos em números, pois dependendo de onde rebemos os dados eles serão strings. Após convertidos para números e resolvermos a operação, solicitamos que o código exiba o resultado na tela. 
		



		${CONDIÇÕES NO JS}
		
		Nas linguagens imperativas, ditas populares, os códigos podem parar de executar um linha sequencial, e podem ter um desvio condicional. Ou seja, elas podem ter uma bifurcação, que seria: Caso aconteça uma coisa, acontecerá x - caso contrário, y. Que seria o if (se) ou else (senão)

		=> if(condição)
			{ crio um bloco
				caso true, se a condição for verdadeira     
			} else {
				caso false crio outro bloco
			}


		então ficaria: 
		
				if(condition){
					true;
				} else {
					false;
				}
				
				
				*** TIPOS DE CONDIÇÃO ***
				
				
					>> CONDIÇÃO SIMPLES
					
						if(condition){
							true;
						} 
						
					Nessa, se o valor for false nada irá acontecer.
					>> CONDIÇÃO COMPOSTA
					
					Já nessa, o comput terá duas possibilidades de execução: true e false.
				
						
							if(condition){
								true;
							} else {
								false;
							}
						
				
				
				{Indentação = recuo - em inglês: indent (É o que fazemos para deixarmos o código organizado)}
				
				
				
				
*********JS*********


=>>>>> 

var velocidade = 50
console.log(`A velocidade do seu carro é de ${velocidade} km/h!`)
if(velocidade>60){ // Condição simples => Se você não ultrapassou o limite você não fez mais que a sua obrigação.  
    console.log(`Você ultrapassou a velocidade permitida. Multado!`)
}
console.log('Dirija sempre com o sinto de segurança!')



=>>>>>

/* var país = 'Brasil'

console.log(`Vivendo em ${país}`)
if (país == 'Brasil'){
    console.log('Você é Brasileiro!')
} else {
    console.log('Você é Estrangeiro!')
} */

var país = 'França'

console.log(`Vivendo em ${país}`)
if (país != 'Brasil'){
    console.log('Você é Estrangeiro!')
} else {
    console.log('Você é Brasileiro!')
}


*********HTML*********
	
	
=>>>>>
	
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DETRAN</title>
    <style>
        div{
            margin-top: 20px;
        }

        input#txtvelocidade{
            width: 70px;
        }
    </style>
</head>
<body>
    <h1>Sistema de Multas</h1>
    Velocidade do carro: <input type="number" name="txtvelocidade" id="txtvelocidade"> km/h.
    <input type="button" value="Verificar" onclick="calcular()">
    <div id="res">

    </div>

    <script>
        function calcular(){
            var txttv = document.querySelector('input#txtvelocidade')
            var res = document.querySelector('div#res')
            var Velocidade = Number(txttv.value)
            res.innerHTML = `<p>Sua velocidade atual é de <strong>${Velocidade} km/h.</strong></p>`
            if(Velocidade > 60){
                res.innerHTML += `<p>Você foi <strong>MULTADO</strong> por execesso de velocidade!</p>`
            }
            res.innerHTML += `<p>Dirija sempre com cinto de segurança!</p>`
        }
    </script>
</body>
</html>


=>>>>>

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Homework Extra 1: Qual a sua nacionalidade?</title>
    <style>
        div{
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1>Em que país você nasceu? Me conta ai!</h1>
    <input type="text" name="nacionalidade" id="nacionalidade">
    <input type="button" value="Quero saber!" onclick="responder()">
    <div id="resultado"></div>

    <script>
        function responder(){
            var nasc = document.querySelector('input#nacionalidade')
            var resultado = document.querySelector('div#resultado')
            var nasceu = String(nasc.value)
            resultado.innerHTML = `Você nasceu no (a, os, as, em) ${nasceu}!`
            if(nasceu == 'Brasil' || nasceu == 'brasil'){
                resultado.innerHTML += `<p> Que pena amigo... <strong>Estamos no mesmo barco</strong> kkkkkkk</p>`
                resultado.innerHTML += `<p> Mas vamos chegar lá de qualquer jeito, não é?!`
            } else {
                resultado.innerHTML += `<p>Você é Estrangeiro!</p>`
                resultado.innerHTML += `<p><strong>Alguém me explica o que é que você ta fazendo aqui???????</strong></p>`
            }
            

        }
    </script>
</body>
</html>

=>>>>>

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Homework Extra 2: Você já pode votar? </title>
    <style>
        div{
            margin-top: 20px;
        }

        body{
            font-size: 18pt;
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);
        }

        #txtidade{
            width: 80px;
        }

        .amarelo{
            color: rgb(217, 221, 0);
        }

        .verde{
            color: rgb(47, 128, 0);
        }

        .azul{
            color: rgb(10, 10, 117);
        }
    </style>
</head>
<body>
    <h1>Você já pode votar?</h1>
    Quantos anos você tem? <input type="number" name="txtidade" id="txtidade">
    <input type="button" value="Enviar" onclick="votar()">
    <div id="resultado"></div>

    <script>
        function votar(){
            var txtnumero = document.querySelector('input#txtidade')
            var resultado = document.querySelector('div#resultado')
            var idade = Number(txtnumero.value)
            resultado.innerHTML = `<p>A sua idade é <strong>${idade}</strong> anos de idade!`
                if(idade >= 16){
                    resultado.innerHTML += `<p>Você já pode votar!</p>`
                    resultado.innerHTML += `<p class="verde">você vai querer ser responsável pelo <strong class="amarelo">FUTURO</strong> do seu País?</p>`
                } else {
                    resultado.innerHTML += `<p>Você ainda não pode votar!</p>`
                    resultado.innerHTML += `<p><strong class="amarelo">MAS NÃO SE ESQUEÇA:</strong><em>Você também pode fazer a sua parte, para que seu País seja um lugar melhor!</em></p>`
                    resultado.innerHTML += `<p><strong class="verde">Se cada um ajudar, nós poderemos ter uma vida MELHOR!!!</strong></p>`
                    resultado.innerHTML += `<p><strong><em class="azul">FAÇA A SUA PARTE!</em></strong></p>`
                }
            
        }
    </script>
</body>
</html>

		
-------------------------------------------------------------------------------------------------------------------------------------------------

		-------------------------------
		 Aula 11 - Condições (Parte 2)
		-------------------------------
		
(Você sabe mudar a cor de fundo de um site, dinamicamente, usando JavaScript? Sabe como inserir uma imagem usando JavaScript em um site, sem ter a tag img previamente definida? Sabe como utilizar condições simples (if), condições compostas (if..else), condições aninhadas (if..elseif..else) e condições múltiplas (switch..case) em JavaScript?)


> Guanabara ask...
------------------

		1 - Voceê sabe coo utilizar a extensão Node Exec no VS Code?
		
			Sim, depois de habilitada na IDE, usamos a Função F8 do teclado para acioná-la.
			
			
			
		2 - Sabe criar uma condição em JS?
		
			Sim, duas: Simples e composta utilizando o if para condição simples e if/else para condição composta.
			
			
			
		3 - Você sabe diferenciar condições simples e condições compostas no seu código?
		
			Sim, como na resposta acima, só "if" seria para uma condição simples, ou seja, caso algo aconteça, uma ação será tomada, caso contrário, nada irá acontecer. Já na composta, há duas possibilidades de acontecimentos. Ou uma, ou outra. 
		
		
		${Condições no JS - Parte 2}
		
				***Condição aninhada***
				
				=> Pegamos uma condição composta e colocamos outras condições dentro dela. (Aninhada, vem de Ninho)
		
			
						if(condition1){
								bloco1 - true;
							} else {
								if(condition2){
									bloco2 - true;
								} else {
									bloco3 - false;
								}
							}


Então, se a condição 1 for verdadeira, o código executa a linha e finaliza, caso contrário ela entre na condição 2, ela irá verificar as possibilidades.


				***Condição Multipla***
				
					Ela funciona be caso eu precise trabalhar com valores fixos (ela não funciona muito be pra intervalos de valores como nós vimos na condição aninhada). Ela tem a posibilidade não só do sim e não, mas de outros valores. Como já disse, de valores fixos.

					
					switch(expressão){
						case valor 1:
							***
							break
							
						case valor 2:
							***
							break
							
						case valor 3:
							***
							break
							
						default:
							***
							break
					}
						

break = NUNCA ESQUECER DE COLOCAR, POIS SENÃO O CÓDIGO TERÁ UM PROBLEMA. PODERÁ ENTRAR EM LOOPING, CONTINUARÁ EXECUTANDO ATÉ ENCONTRAR UM BREAK NO CAMINHO.

	=> A estrutura switch/case é bem simples: o comput testará o que estiver dentro dos parenteses do do switch. Caso o teste seja compatível com o valor 2, por exemplo, o bloco daquele caso será executado; encontrará o break e em seguida continuará a executar o código partir do do fechamento de chaves do switch. 


*********JS*********

=>>>>>

/* ...AINDA SERIA A CODIÇÃO COMPOSTA 

var idade = 26
if(idade < 18){
    console.log('Você é menor de idade!')
} else {
    console.log('Você já atingiu a maioridade!')
}*/

var idade = 68
console.log(`Você tem ${idade} anos de idade!`)

if(idade < 16){
    console.log('Você não pode votar!')
} else if (idade < 18 || idade > 65){
    console.log('Seu voto é opcional!')
} else {
    console.log('Você precisa votar, pois pra você o voto é obrigatório no Brasil!')
}


=>>>>>

var Agora = new Date()
var hora = Agora.getHours() // Assim colocamos exatamente a hora do sistema do comput.

console.log(`Agora são exatamente ${hora} horas!`)

if(hora >= 6 && hora < 12){
    console.log('Olá, bom dia!')
} else if (hora >= 12 && hora < 18) {
    console.log('Boa tarde, você já almoçou?')
} else if (hora >= 18 &&  hora <=24 ){
    console.log('Boa noite! você está cansado? Trabalhou muito?')
} else{
    console.log('É madrugada, você não deveria estar dormindo?')
}


=>>>>>

var agora = new Date
var diaSem = agora.getDay()

/* 
    0 = Domingo
    1 = Segunda
    2 = Terça
    3 = Quarta
    4 = Quinta
    5 = Sexta
    6 = Sábado
*/

console.log(diaSem)

switch(diaSem){
    case 0:
        console.log('Hoje é Domingo!')
        break
    case 1:
        console.log('Hoje é Segunda!')
        break
    case 2:
        console.log('Hoje é Terça!')
        break
    case 3:
        console.log('Hoje é Quarta!')
        break
    case 4:
        console.log('Hoje é Quinta!')
        break
    case 5:
        console.log('Hoje é Sexta!')
        break
    case 6:
        console.log('Hoje é Sábado!')
        break
    default:
        console.log('[ERRO] Dia da semana inválido!')
        break
}


-------------------------------------------------------------------------------------------------------------------------------------------------

		---------------------------------
		 Exercícios JavaScript (Parte 1)
		---------------------------------
		
(Vamos fazer alguns exercícios de JavaScript? Chegou a hora de provar a si mesmo que todo o seu esforço está valendo a pena até aqui. Quando aprendemos e praticamos, solicitamos os nossos conhecimentos adquiridos. Então vamos lá! Não pule esse vídeo e faça todas as atividades propostas em JavaScript.)



> Guanabara ask...
------------------
	<No questions>


		${hora de Praticar!!}	
	  ***** MODELO DOS EXERCÍCIOS *****
	  
	  

=> HTML

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modele de exercício</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    
    <header>
        <h1>Título</h1>
    </header>

    <section>
        <div>
            <p>Teste 1</p>
        </div>

        <div>
            <p>Teste 2</p>
        </div>
    </section>

    <footer>
        <p>&copy; CursoemVídeo</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>





=> CSS

body{
    background: rgb(137, 137, 235);
    font: normal 15pt Arial;
}

header{
    color: #ffffff;
    text-align: center;
}

section{
    background: #ffffff;
    border-radius: 10px;
    padding: 15px;
    width: 500px;
    margin: auto;
    box-shadow: 5px 5px 8px rgba(0, 0, 0, 0.527);
}

footer{
    color: #ffffff;
    text-align: center;
    font-style: italic;
}



=>JS	

alert('Olá, mundo!')
		
		


-------------------------------------------------------------------------------------------------------------------------------------------------

		---------------------------------
		 Exercícios JavaScript (Parte 2)
		---------------------------------
		
(Vamos fazer alguns exercícios de JavaScript? Chegou a hora de provar a si mesmo que todo o seu esforço está valendo a pena até aqui. Quando aprendemos e praticamos, solicitamos os nossos conhecimentos adquiridos. Então vamos lá! Não pule esse vídeo e faça todas as atividades propostas em JavaScript.)



> Guanabara ask...
------------------
	<No questions>		
		
		
		Botando a mão na massaaaaaaaaa!!!!
		
		
		

=>> HTML

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hora do Dia</title>
    <link rel="stylesheet" href="style.css">
</head>
<body onload="carregar()"> <!--onload = quer dizer 'Quando eu carregar', eu convoco a ação carregar() -->
    
    <header>
        <h1>Hora do Dia</h1>
    </header>

    <section>
        <div id="msg">
            Aqui vai aparecer uma msg...            
        </div>

        <div>

        </div>

        <div id="foto">
            <img id="imagem" src="manha.png" alt="Foto do Dia"/> <!--alt = texto alternativo-->
        </div>
    </section>

    <footer>
        <p id="footer">&copy; CursoemVídeo</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>



=>> CSS

body{
    background: rgb(137, 137, 235);
    font: normal 15pt Arial;
}

header{
    color: #ffffff;
    text-align: center;
}

section{
    background: #ffffff;
    border-radius: 10px;
    padding: 15px;
    width: 500px;
    margin: auto;
    box-shadow: 5px 5px 8px rgba(0, 0, 0, 0.527);
}

div{
    text-align: center;
}

footer{
    color: #ffffff;
    text-align: center;
    font-style: italic;
}




=>> Js		
		
		
function carregar(){
    var msg = document.getElementById('msg')
    var img = document.getElementById('imagem')
    var cabecalho = document.getElementById('cabecalho')
    var rodape = document.getElementById('rodape')
    var data = new Date()
    //var hora = data.getHours()
    var hora = 18
    msg.innerHTML = `Agora são ${hora} horas!`

        if(hora >= 6 && hora < 12){
            //Bom dia
            img.src = 'manha.png'
            msg.innerHTML += '<p>Bom dia! Pronta pra começar?</p>'
            document.body.style.background = '#bac5cb'
            cabecalho.style.color = '#04330e'
            rodape.style.color = '#04330e'
        } else if (hora >= 12 && hora < 18){
            // Boa tarde
            img.src = 'tarde.png'
            msg.innerHTML += '<p>Boa tarde! Você já almoçou?</p>'
            document.body.style.background = '#f69f2c'
            cabecalho.style.color = '#421400'
            rodape.style.color = '#421400'
        } else if (hora >=18 && hora <= 23) {
            // Boa noite
            img.src = 'noite.png'
            msg.innerHTML += '<p>Tenha uma ótima noite e bom descanso!</p>'
            document.body.style.background = '#0e3359'
            cabecalho.style.color = '#d49457'
            rodape.style.color = '#d49457'
        } else {
            // Madrugada
            img.src = 'madrugada.png'
            msg.innerHTML += '<p>Já é tarde! Você não deveria estar dormindo e tendo bons sonhos?</p>'
            document.body.style.backgroundImage = 'url("sonhos1.jpg")'
            cabecalho.style.color = '#053e4f'
            rodape.style.color = '#053e4f'
        }
}		
		
		
	
		
		
-------------------------------------------------------------------------------------------------------------------------------------------------

		---------------------------------
		 Exercícios JavaScript (Parte 3)
		---------------------------------
		
(Vamos fazer alguns exercícios de JavaScript? Chegou a hora de provar a si mesmo que todo o seu esforço está valendo a pena até aqui. Quando aprendemos e praticamos, solicitamos os nossos conhecimentos adquiridos. Então vamos lá! Não pule esse vídeo e faça todas as atividades propostas em JavaScript.)



> Guanabara ask...
------------------
	<No questions>		
		
		
		Botando a mão na massaaaaaaaaa!!!!
		
		
=>> HTML


<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Verifícador de Idade</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    
    <header>
        <h1>Verificador de Idade</h1>
    </header>

    <section>
        <div>
            <p class="centro">Ano de nascimento: &nbsp;
                <input type="number" name="txtano" id="txtano" min="0" max="100">
            </p>
            <p class="centro">Sexo:
                <input type="radio" name="radsex" id="mas" checked>
                <label for="mas">Masculino</label>
                <input type="radio" name="radsex" id="fem">
                <label for="fem">Feminino</label> &nbsp; 
                <input type="button" value="Verificar" onclick="verificar()"> 
            </p>
        </div>

        <div id="res">
            Preencha os dados acima para ver o resultado!
        </div>
    </section>

    <footer>
        <p>&copy; CursoemVídeo</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>




=>> CSS


body{
    background: rgb(137, 137, 235);
    font: normal 15pt Arial;
}

header{
    color: #ffffff;
    text-align: center;
}

.centro{
    text-align: center;
}

#res {
    text-align: center;
}

section{
    background: #ffffff;
    border-radius: 10px;
    padding: 15px;
    width: 500px;
    margin: auto;
    box-shadow: 5px 5px 8px rgba(0, 0, 0, 0.527);
}

footer{
    color: #ffffff;
    text-align: center;
    font-style: italic;
}





=>> JS	
		
		
function verificar(){
    var data = new Date()
    var ano = data.getFullYear()
    var fano = document.getElementById('txtano')
    var res = document.querySelector('div#res')
    if (fano.value.length == 0 || Number(fano.value) > ano) { // Number nesse caso é só para deixar mais explicito, pois sem o 'Number', funciona também!
        alert('[ERRO] Verifique os dados informados e tente novamente!')
    } else {
        var fsex = document.getElementsByName('radsex')
        var idade = ano - Number(fano.value)
        var genero = ''
        var img = document.createElement('img')
        img.setAttribute('id', 'foto')
        if (fsex[0].checked){
            genero = 'Masculino'
            if (idade >= 0 && idade < 4){
                // Criança de até 3 anos
                img.setAttribute ('src', 'm1.png')
            } else if (idade < 7){
                // Criança de ate 6 anos
                img.setAttribute ('src', 'm5.png')
            } else if (idade < 13){
                // Criança/Adolescente de até 12 anos
                img.setAttribute ('src', 'm10.png')
            } else if (idade < 17){
                // Adolescente de até 16 anos
                img.setAttribute ('src', 'm15.png')
            } else if (idade <= 25){
                // Adulto de até 25 anos
                img.setAttribute ('src', 'm25.png')
            } else if (idade <= 35){
                // Adulto de até 35 anos
                img.setAttribute ('src', 'm35.png')
            } else if (idade <= 45){
                // Adulto de até 45 anos
                img.setAttribute ('src', 'm45.png')
            } else if (idade <= 55){
                // Adulto de até 55 anos
                img.setAttribute ('src', 'm55.png')
            } else if (idade <= 65){
                // Idoso de até 65 anos
                img.setAttribute ('src', 'm65.png')
            } else if (idade <= 75){
                // Idoso de até 75 anos
                img.setAttribute ('src', 'm75.png')
            } else if (idade <= 85){
                // Idoso de até 85 anos
                img.setAttribute ('src', 'm85.png')
            } else {
                // Idoso de até 86 anos pra cima.
                img.setAttribute ('src', 'm95.png')
            }
        } else if (fsex[1].checked){
            genero = 'Feminino'
            if (idade >= 0 && idade < 4){
                // Criança de até 3 anos
                img.setAttribute ('src', 'f1.png')
            } else if (idade < 7){
                // Criança de ate 6 anos
                img.setAttribute ('src', 'f5.png')
            } else if (idade < 13){
                // Criança/Adolescente de até 12 anos
                img.setAttribute ('src', 'f10.png')
            } else if (idade < 17){
                // Adolescente de até 16 anos
                img.setAttribute ('src', 'f15.png')
            } else if (idade <= 25){
                // Adulto de até 25 anos
                img.setAttribute ('src', 'f25.png')
            } else if (idade <= 35){
                // Adulto de até 35 anos
                img.setAttribute ('src', 'f35.png')
            } else if (idade <= 45){
                // Adulto de até 45 anos
                img.setAttribute ('src', 'f45.png')
            } else if (idade <= 55){
                // Adulto de até 55 anos
                img.setAttribute ('src', 'f55.png')
            } else if (idade <= 65){
                // Idoso de até 65 anos
                img.setAttribute ('src', 'f65.png')
            } else if (idade <= 75){
                // Idoso de até 75 anos
                img.setAttribute ('src', 'f75.png')
            } else if (idade <= 85){
                // Idoso de até 85 anos
                img.setAttribute ('src', 'f85.png')
            } else {
                // Idoso de até 86 anos pra cima.
                img.setAttribute ('src', 'f95.png')
            }
        }
        res.style.textAlign = 'center'
        res.innerHTML = `<p>Detectamos uma pessoa do gênero ${genero} </br> com ${idade} anos! </p>`
        res.appendChild(img)
    }
}




-------------------------------------------------------------------------------------------------------------------------------------------------


*****************************************		
   => Módulo E: Repetições em JavaScript
*****************************************


	>> 5 Aulas <<

		- Aula 13 – Repetições (Parte 1)
		- Aula 14 – Repetições (Parte 2)
		- Exercícios JavaScript (Parte 4)
		- Exercícios JavaScript (Parte 5)
		- Exercícios JavaScript (Parte 6)
		
		
				=> Repetições em JS
				-------------------
				
					= Repetições com teste no início (while)
					= Repetições com teste no final (do/while)
					= Repetições com variável de controle (for)
					** Exercícios Propostos **




		--------------------------------
		 Aula 13 - Repetições (Parte 1)
		--------------------------------
		
		
(Você sabe como utilizar as estruturas while e do..while em JavaScript? Sabe como realizar repetições ou laços em JavaScript? Sabe como fazer um mesmo código ser executado várias vezes em um mesmo programa?)


> Guanabara ask...
------------------

		1 - Sabe mudar a cor de fundo DINÂMICAMENTE, usando JS?
		
			Sim, tanto conforme solicitação por um formulário, como usando o horário do computador para isso.
			
			
		2 - Consegue inserir uma imagem dentro do seu site sem ter a tag <img> previanete criada?
		
			Sim, utilizando o mecanismo de "soma" quando solicito um resultado por meio do n.appendChild(img)
		
		
		3 - Já treinos bastante o uso de condições simples, compostas, aninhadas e múltiplas? 
		
			Sim, além dos exercícios que o Guanabara propôs, fiz alguns que eu criei e foi tranquilo.
			
			
			
			 
			  ${Repetições e JS}
			 (Laços ou Iterações)
			 
			 
	Ex: COMER UMA PIZZA:
			 
			 function comerPizza() {
			 	comerFatia ()
			 	comerFatia ()
			 	comerFatia ()
			 	comerFatia ()
			 	comerFatia ()
			 	comerFatia ()
			 	comerFatia ()
			 	comerFatia ()
			 }
			 
			 		=> Até a pizza acabar.


		- Estruturas de controle: Vou do ponto A até o ponto B executando as tarefas uma em seguinda da outra de forma contínua, sequencialmente (em linha reta.) 
		
	Agora com a estrutura de repetição {enquanto}, usamos o laço, ou repetição que, com o exemplo da pizza, eu saio do ponto A (Compro a pizza) e vou até o ponto B (ir dormir) da seguinte forma: ENQUANTO houver pedaços, ou seja, for verdadeira, eu sigo a ordem - corto a pizza, coloco no prato, como a fatia - quando não não houver mais pedaços, eu sigo para o ponto B que é coloco meu prato na pia, escovo os dentes e vou dormir.
	
	
			
	       ---> while (condição) {  ----------------
	       |					 |
	       |	Bloco de código a ser		 |
	       |		repetido quando	 |
	       |		verdadeiro		 |
	       ---- } 					 |
							 |
							 |
		     <----------------------------------    <<<= Vai para fora do laço quando for falso
		     						   quando não precisar mais ser repetido.
		     						   
		     						   
		     					
		     					
		   	function comerPizza() {
		   	|	
		   	|	while(temFatia()) {
		   	|	|	
		   	|	|	comerFatia()
		   	|	}
		   	}
		   	
		   	
		   	
	A estrutura acima serve para condições que são testadas no início. Porém temos as que são testadas no final!
	
	
		     				
		Que seria:
		
			function comerPizza() {
			|	
			|	do {
			|	|
			|	|	BLOCO DE REPETIÇÃO
			|	|
			|	} while (condição)
			}		   
		     						   
		     						   

==>> JS


/* Teste de repetição no Início (com while)

    var c = 1
    while (c <= 6) {
    console.log(`Passo ${c}`)
    c++ // c = c + 1          
}                            */


// Teste de repetição no Final (com do/while) 

var c = 1
do {
console.log(`Passo ${c}`)
c++
} while (c <= 6)


/*  
	A PIOR FORMA DE TODAS KKKKKKK
	
    console.log('Tudo bem?')
    console.log('Tudo bem?')
    console.log('Tudo bem?')
    console.log('Tudo bem?') 
    console.log('Tudo bem?')
    console.log('Tudo bem?') */				   
		     						   
		     						   



-------------------------------------------------------------------------------------------------------------------------------------------------

		--------------------------------
		 Aula 14 - Repetições (Parte 2)
		--------------------------------
	     						   
(Você sabe utilizar a estrutura for para realizar repetições em JavaScript? Sabe como utilizar repetições com variáveis de controle em JavaScript? Sabe a diferença existente entre while, do..while e for?)



> Guanabara ask...
------------------

		1 - O que eu faço se quiser fazer uma determinada atividade acontcer várias vezes?
		
			Ao invés de copiar e colar o codigo várias vezes, eu utilizo uma estrutura de repetição ou laço.
			
			 
		2 - Sabe diferenciar as estruturas de condição e as estruturas de repetição?
		
			Sim, as estruturas de condições são para quando eu tenho duas ou mais opções e verifico de n coisa é verdadeira ou falsa. Já a estrutura de repetição eu utilizo para quando eu quiser que uma n coisa seja executada várias vezes.
			
			while é uma estrutura de repetição. exemplo: Enquanto for verdade, continue fazendo

if é uma estrutura de condição . Exemplo: Se for verdade faça e pronto


		3 - Consegue dizer a diferença entre as estruturas while e a do..while?
		
			Sim, while serve para o teste de repetição no início e do..while serve para teste de repetição no fim do bloco de código.						   
		     						   	
			  ${Repetições e JS}
			 (Laços ou Iterações)
			 
			 
			 Estrutura de repetição com variável de controle => FOR
			 ------------------------------------------------ 
			 
			 
				 - Inicialização;
				 - Teste lógico;
				 - Incremento.
				 
			 
	Ponto A -> Iinicialização/teste lógico ->
			
					incremento (repetição enquanto verdade) -> Ponto B.
					
					
					
					for (inicio; teste; incr) {
						
					}
					
					
			eXEMPLOS: (AULA PASSADA COM TESTE NO INICIO, PODEMOS APLICAR PARA A VARIÁVEL DE CONTROLE.)
			
				// TESTE NO INÍCIO
				
				var c = 1
				while (c <= 10) {
					
					Bloco código
					c++
				}
				
					----
				
				// VARIÁVEL DE CONTROLE
				
				for (var c = 1; c <= 10; c++) {
					
					Bloco código
				}
				
	Entendemos como debugar o código. (Nessa aula na verdade, vimos como ver o código funcionando linha por linha, ação por ação. Em estruturas de repetição isso é muito valioso, pois podemos ver como está sendo a resposta do blocos de código.)			
				
							

==>>> JS


/* var c = 1
while (c <= 5) {
    console.log (`Linha ${c}`)
    c += 2
}*/

//-------------------------------------

// MODO DEPURADOR - VS CODE

console.log ('Vai começar em ...')
for (var c = 5; c > 0; c--){
    console.log (`...${c}`)
}
console.log ('Go, go, go!')							

-------------------------------------------------------------------------------------------------------------------------------------------------


		---------------------------------
		 Exercícios JavaScript (Parte 4)
		---------------------------------
	     						   
(Vamos fazer alguns exercícios de JavaScript? Chegou a hora de provar a si mesmo que todo o seu esforço está valendo a pena até aqui. Quando aprendemos e praticamos, solicitamos os nossos conhecimentos adquiridos. Então vamos lá! Não pule esse vídeo e faça todas as atividades propostas em JavaScript.)



> Guanabara ask...
------------------

		1 - Já aprendeu a usar direito a extensão do Watch in Chrome no VS Code?
		
			Não, pois não está mais funcionando. Estou usando o Live Server que dá pra todos os navegadores que você usar como padrão do pc.
			
			
			
		2 - Já aprendeu a usar  o MODO DEPURAÇÃO do VS code?
		
			Sim, é simples: Você pode ir em Run > Start Debugging ou apertar a tecla F5 (marcamos a opção pra ser reproduzida no node.js) > No código você marca com a bolinha vemelha (entre o numero da linha de código e o próprio código) depois, do lado esquerdo, em "watch" acrescentamos qual variável queremos monitorar. Assim a cada linha apertamos F10 para ver sendo reproduzido linha por linha. Essa representação é mostrada no terminal, na aba debug console.
			
			
		3 - Já fez todos os teste com as estruturas while, do/while e for?
		
			Sim, e a princípio foi tranquilo pois já havia visto essa mesma matéria na faculdade, porém foi bem ais esclarecedora.
			
		
		
		${HORA DE PRATICAR}
		
		
	Minhas tentativas ex016
	
	

=> HTML

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vamos contar</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    
    <header>
        <h1>Vamos contar</h1>
    </header>

    <section>
        <div>
            <p>Início:
                <input type="number" name="txtinicio" id="txtinicio">
            </p>
            <p>Fim:
                <input type="number" name="txtfim" id="txtfim">
            </p>
            <p>Passo:
                <input type="number" name="txtpasso" id="txtpasso">
            </p>
            <input type="button" value="Contar" onclick="contar()"> 
        </div>

        <div id="contando">
            <p>Preparando contagem... </p>
        </div>
    </section>

    <footer>
        <p>&copy; CursoemVídeo</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>


=>CSS

body{
    background-image: url(img/tempo.jpg);
    font: normal 15pt Arial;
}

header{
    color: #ffffff;
    text-align: center;
}

section{
    background: #ffffff;
    border-radius: 10px;
    padding: 15px;
    width: 300px;
    margin: auto;
    box-shadow: 5px 5px 8px rgba(0, 0, 0, 0.527);
}

div{
    margin-top: 10px;
}

footer{
    color: #ffffff;
    text-align: center;
    font-style: italic;
}


=> JS

function contar(){
    var inicio = document.getElementById('txtinicio')
    var fim = document.getElementById('txtfim')
    var passo = document.getElementById('txtpasso')
    var contando = document.getElementById('contando')
    if (passo.value.length == 0 || Number(passo.value) < 1){
        alert('[ERRO] Impossivel contar a passo "0"!')
    } else {
        if (inicio.value.length == 0 || fim.value.length ==0){
            contando.innerHTML = 'Impossível contar!'
        } else {
            for(Number(inicio); Number(fim); Number(passo)){
                contando.innerHTML = `...${inicio}`
            }
        }
    }
}


		
		
		Minhas tentativas ex017
		
		
=>>css (foi o mesmo para tenativa 1 e 2)


body{
    background-image: url(img/numeros.jpg);
    font: normal 15pt Arial;
}

header{
    color: #ffffff;
    text-align: center;
}

.sombra{
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.527);
}

section{
    background: #ffffff;
    border-radius: 10px;
    padding: 15px;
    width: 500px;
    margin: auto;
    box-shadow: 5px 5px 8px rgba(0, 0, 0, 0.527);
}

footer{
    color: #ffffff;
    text-align: center;
    font-style: italic;
}




=>> html (tentativa 1)
**********************

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tabuando</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    
    <header class="sombra">
        <h1>Que tabuada você quer?</h1>
    </header>

    <section>
        <div>
            <p>Números: 
                <input type="number" name="txttabu" id="txttabu">
                <button type="submit" onclick="gerar()">Gerar Tabuada</button>
            </p>
            
        </div>

        <div>
            <p> 
                <textarea  name="tabuada" id="tabuada" cols="20" rows="20" placeholder="Digite um número acima"></textarea>
            </p>
        </div>
    </section>

    <footer class="sombra">
        <p>&copy; CursoemVídeo</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>




=>> JS (tenatativa 1)
*********************

function gerar(){
    let num = document.getElementById('txttabu')
    let tabuada = document.getElementById('tabuada')

    if (num.value.length == 0){
        alert('[ERRO] Informe um numero')
    } else {
        let numero = Number(num.value)
        for (let cont = 0; cont <=10; cont++){
            resultado = cont * numero
            tabuada.innerHTML = `${numero} * ${cont} = ${resultado} <br>`
        }
    }
}



=>> html (tenatativa 2 - com resultado [CORRIGIDO GUANABARA]) 
*************************************************************

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tabuando</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    
    <header class="sombra">
        <h1>Que tabuada você quer?</h1>
    </header>

    <section>
        <div>
            <p>Números: 
                <input type="number" name="txttabu" id="txttabu">
                <button type="submit" onclick="gerar()">Gerar Tabuada</button>
            </p>
            
        </div>

        <div>
            <p> 
                <select name="tabuada" id="tabuada" size="11">
                    <option>Digite um botão acima</option>
                </select>
            </p>
        </div>
    </section>

    <footer class="sombra">
        <p>&copy; CursoemVídeo</p>
    </footer>

    <script src="script2.js"></script>
</body>
</html>



=>> JS (tenatativa 2 - com resultado [CORRIGIDO GUANABARA])
***********************************************************	
	

function gerar(){
    let num = document.getElementById('txttabu')
    let tabuada = document.getElementById('tabuada')

    if (num.value.length == 0){
        alert('[ERRO] Informe um número!')
    } else {
        let numero = Number(num.value)
        tabuada.innerHTML = ''
        for (let cont = 0; cont <=10; cont++){
            let item = document.createElement('option')
            resultado = cont * numero
            item.text = `${numero} * ${cont} = ${resultado}`
            tabuada.appendChild(item)
        }
    }
}

	
		
-------------------------------------------------------------------------------------------------------------------------------------------------

		---------------------------------
		 Exercícios JavaScript (Parte 5)
		---------------------------------
		
(Vamos fazer alguns exercícios de JavaScript? Chegou a hora de provar a si mesmo que todo o seu esforço está valendo a pena até aqui. Quando aprendemos e praticamos, solicitamos os nossos conhecimentos adquiridos. Então vamos lá! Não pule esse vídeo e faça todas as atividades propostas em JavaScript.)



> Guanabara ask...
------------------	
	(No questions!)
	
	
	
 *** RESOLUÇÃO DO GUANABARA ***
 
		
		EX016
 		*****
 
 
 => HTML
 
 
 <!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vamos contar</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    
    <header>
        <h1>Vamos contar</h1>
    </header>

    <section>
        <div id="numeros">
            <p>Início:
                <input type="number" name="txtinicio" id="txtinicio">
            </p>
            <p>Fim:
                <input type="number" name="txtfim" id="txtfim">
            </p>
            <p>Passo:
                <input type="number" name="txtpasso" id="txtpasso">
            </p>
            <input type="button" value="Contar" onclick="contar()"> 
        </div>

        <div id="contando">
            <p>Preparando contagem... </p>
        </div>
    </section>

    <footer>
        <p>&copy; CursoemVídeo</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>


 
 => CSS
 
 
 body{
    background-image: url(img/tempo.jpg);
    font: normal 15pt Arial;
}

header{
    color: #ffffff;
    text-align: center;
}

section{
    background: #ffffff;
    border-radius: 10px;
    padding: 15px;
    width: 500px;
    margin: auto;
    box-shadow: 5px 5px 8px rgba(0, 0, 0, 0.527);
}

div{
    margin-top: 10px;
}

footer{
    color: #ffffff;
    text-align: center;
    font-style: italic;
}
 
 
 
 
 => JS
		
// let foi criado nas ultimas versões do JS e é melhor por uma declaração do escopo*

function contar(){
    let inicio = document.getElementById('txtinicio')
    let fim = document.getElementById('txtfim')
    let passo = document.getElementById('txtpasso')
    let contando = document.getElementById('contando')

    if (inicio.value.length == 0 || fim.value.length ==0 || passo.value.length ==0){
        contando.innerHTML = 'Impossível contar!'
    } else{
        contando.innerHTML = 'Contando:'
        let ini = Number(inicio.value)
        let f = Number(fim.value)
        let pas = Number(passo.value)

        if(pas <= 0){
            alert('[ERRO] Impossivel contar a passo "1"!')
            pas = 1
        }
        if(ini < f){
            for(let c = ini; c <= f; c += pas){
                // contagem crescente
                contando.innerHTML += ` ${c} \u{1F449} `
            }
        } else {
            for(let c = ini; c >= f; c -= pas){
                // contagem decrescente
                contando.innerHTML += ` ${c} \u{1F449} `
            }
        }
        contando.innerHTML += `\u{1F3C1}`
    }
}		
		
		
		
--------------------------------------------------------------------------------------------------------------------------------------------------		

		---------------------------------
		 Exercícios JavaScript (Parte 6)
		---------------------------------
		
(Vamos fazer alguns exercícios de JavaScript? Chegou a hora de provar a si mesmo que todo o seu esforço está valendo a pena até aqui. Quando aprendemos e praticamos, solicitamos os nossos conhecimentos adquiridos. Então vamos lá! Não pule esse vídeo e faça todas as atividades propostas em JavaScript.)



> Guanabara ask...
------------------	
	(No questions!)
	
	
	
 *** RESOLUÇÃO DO GUANABARA ***		
		
		EX017
		*****
		


=>> html

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tabuada</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    
    <header class="sombra">
        <h1>Vamos contar?</h1>
    </header>

    <section>
        <div>
            <p>Número: 
                <input type="number" name="txtnum" id="txtnum">
                <input type="button" value="Gerar Tabuada" onclick="gerarTabuada()">
            </p>
        </div>

        <div>
            <p><select name="tabuada" id="tabuada" size="10">
                <option>Digite um número acima</option>
            </select></p>
        </div>
    </section>

    <footer class="sombra">
        <p>&copy; CursoemVídeo</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>


=>>css

body{
    background-image: url(img/numeros.jpg);
    font: normal 15pt Arial;
}

header{
    color: #ffffff;
    text-align: center;
}

.sombra{
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.527);
}

section{
    background: #ffffff;
    border-radius: 10px;
    padding: 15px;
    width: 500px;
    margin: auto;
    box-shadow: 5px 5px 8px rgba(0, 0, 0, 0.527);
}

footer{
    color: #ffffff;
    text-align: center;
    font-style: italic;
}



=>> JS


function gerarTabuada() {
    let num = document.getElementById('txtnum')
    let tabu = document.getElementById('tabuada')

    if (num.value.length == 0){
        alert('[ERRO] Informe um número!')
    } else {
        let numero = Number(num.value)
        let cont = 1
        tabu.innerHTML = ''
        while (cont <= 10){
            let item = document.createElement('option')
            item.text = `${numero} x ${cont} = ${numero*cont}`
            tabu.appendChild(item)
            cont++
        }
    }
}		
		
		

-------------------------------------------------------------------------------------------------------------------------------------------------


***************************************************		
   => Módulo F: Avançando os estudos em JavaScript
***************************************************


	>> 5 Aulas <<

		- Aula 15 – Variáveis Compostas
		- Aula 16 – Funções
		- Exercícios JavaScript (Parte 7)
		- Exercícios JavaScript (Parte 8)
		- Aula 17 – Próximos Passos
		
		
				--> Variáveis compostas (Arrays)
				--> Uso de funções e eventos (métodos também)
				--> Passagem de parâmetros (pra esses eventos e funções)
				--> Exercícios Porpostos (com arrays e vetores)
				--> Próximos passos (quando o curso acabar, o que devemos estudar e focar)




		--------------------------------
		 Aula 15 – Variáveis Compostas
		--------------------------------
	
	
(Você sabe como funciona um array em JavaScript? Sabe qual é a vantagem em usar variáveis compostas em JavaScript? Consegue pensar em uma maneira de simplificar seus códigos em JavaScript, tornando-os menores?)	
		
> Guanabara ask...
------------------

		1 - Já treinou bastenate o uso das estruturas de repetição? while/ do-while / for?
		
				Ainda não, pois treinar nunca é demais!
				
				
		2 - Aprendeu a como manipular objetos de formulários de HTML usando JS?
		
				Sim, ainda é confuso pra mim, mas nós acrescentamos uma variável onde ela recebe document.creatElemente(dentro de parentese covocamos o que seria do html = ex: um option de uma select, ou uma img de uma div ou de um body, enfim.) 
				let item = document.createElement('option') Após isso criamos uma espécie de apêndice onde a atribuimos na vaviável a ser impressa na tela. Ex: - id tabuada do ex017
				tabuada.appendChild(item) (e dentro do parenteses covocamos a variável já declarada.)
				
				
		3 - Seria melhor tornar seus códigos menores e mais simplificados?
		
				Sim, e vemos isso nessa aula
				
		4 - Você é do tipo de pessoa que já ouviu falar que "usar array é difícil"?
		
				Difícil, não! Complexo e avançado: COM CERTEZA!
				
				
				
			
			=>> ARRAY <<==
			**************
			
			${VARIÁVEIS COMPOSTAS}
			
				1º, O QUE É UMA VARIÁVEL SIMPLES?
					só armazenam um valor por vez
					
				
				Logo, uma variável composta é capaz de armazenar mais de um valor ou vários valores numa mesma estrutura.
				
				
> Usamos o mesmo exemplo para explicar variáveis = O do estacionamento onde daos identificadores para cada vaga para os carros. 
	
	Damos o mesmo identifcador > 
	
		E para declarar essas vagas, usamos => vaga auto (ou let auto.) E pra cada vaga, damos um identificador de índice > Uma chave que vai identificar cada uma delas > 
		
		
		 |------------------> Variável composta, ou array (ou em pt, vetor)
		 |             
		_|__          			* Conteúdo, valor
	Ex: let auto = [   ,    , * ]
			  0   1   2   <- Índice ou key (ou em pt, chave)
			 -----------
			    |
			    |-----------> Elementos
			    
			    
			    
			    >>> ENTÃO UM array OU UM vetor OU UMA variável composta É UMA VARIÁVEL QUE CONTÉM VÁRIOS elementos, CADA ELEMENTO É
			    		 ------      ------       ------------------					----------    
			    	COMPOSTO PELO SEU valor E POR UMA chave DE IDENTIFICAÇÃO <<<
						  ------	   ------
						  
			----------------------------------------------------------------------------------------------------		  
			| ***** PARA LEMBRAR *****                                                                         |
			| O índice não começa no 1 e sim no 0. Ou seja, uma array com 5 elementos terá um índice de 0 a 4  |
			----------------------------------------------------------------------------------------------------
			
			
		Podendo ainda acrescentarmos valores nesse array:
			
			-> No seguinte ex,
			
		let num = [5, 8, 4] --> Aqui o índice foi de 0 a 2, por isso ali embaixo add o let num[3], que será a posição 3 do nosso índice.
				
		let num[3] = 6      --> Ou seja, eu tô dizenso assim pro JS: "Coloque o valor 5 na posição 3". Mesmo não existindo, o JS cria 						 prá nó a posição 3. Passando a ser:
		num = [5, 8, 4, 6]  --> Array com 4 valores e índice indo de 0 a 3 elementos = total de 5 elementos.
		
					
				     ==> Porém, isso é pensando que sabemos qual é a última posição do vetor. Caso você não saiba ou não queira 						   se preocupar com isso, é só dar o comando x.push(7) (onde x é a variável)
		num.push(7)	     --> Dessa forma, a variável num ficará assim: 
		
>>>>>>>>>>>>>>	num = [5,8,4,6,7]   --> Um array com 5 valores e índice indo de 0 a 4 elementos = total de 5 elementos.
		
		
		==>> Outros comandos:
		
			num.length  => Dirá qual o comprimento do array (*em outras linguagens há parenteses após o 'length'. No JS NÃO tem!)
					 - length não é um método. LENGTH é um atributo!
					 
			num.sort() => Método sort organiza em ordem crescente os elementos do array. (ainda usando o ex acima: =>)
			
			---------------------------------------
			|	=> [ 4, 5, 6, 7, 8 ] <= 	|
			---------------------------------------
					
					
			=> [ 4, 5, 6, 7, 8 ] <=		
					----					     ------
					 |---------> Essa é a posição do array  =  | pos |
					 					     ------
					 					     
	=> PARA PRINTAR O VALOR NA TELA, AO INVÉS DE COLOCAR DE FORMA INDIVIDUA, LINHA A LINHA, ASSIM: 
	
	(	console.log(num[0])
		console.log(num[1])
		console.log(num[2])
		console.log(num[3])
		console.log(num[4])	 )
	
	=> PODEMOS PRINTAR ASSIM, DE FORMA MAIS CURTA E MAIS SIMPLIFICADA:
	
			for(let pos = 0; pos < num.length; pos++){
				console.log(num[pos])
			}
		
		
	(essa acima é a maneira tradicional de printar um array na tela, porém, a partir do ES6, o JS tem uma forma ainda mais simples, que é:)
	
		
														 |---> (ou EM)
			for (let pos in num){                                                              -------
				console.log(num[pos])		<--- se leria assim: "PARA cada VARIÁVEL POS DENTRO de NUM "
			}
		
		Este é otimizado para variáveis compostas e objetos, isso porque arrays e objetos são muito importantes para a linguajem JS.
		Ela funcionará somente para arrays e objetos (que no fundo, ou na verdade, são a mesma coisa, porque todo array - no JS - é u 									object!)
		
		
		=>> COMO BUSCAR VALORES DENTRO DE UM ARRAY??? <<==
		
			usamos o método:
			----------------
			
				num.indexOf(7)   <= O JS retornará a chave 3, pois o valor 7 está na chava 3 do nosso array
				
			Caso, eu dê:
			------------
				
				num.indexOf(3)	  <= Pra nós, o JS retornará -1, pois o valor 3 não existe! (Vide lá em cima, o código onde 							estamos o usando a variável num = [ 4, 5, 6, 7, 8 ]!!!!!!!!)
		
		
		
		
-------------------------------------------------------------------------------------------------------------------------------------------------


		-------------------
		 Aula 16 – Funções
		-------------------
		

(Você sabe usar funções em JavaScript? Sabe como aplicar o uso de rotinas em seus códigos para torná-los mais simples? Sabe como usar uma função como resposta a um determinado evento? Sabe como realizar a passagem de parâmetros entre códigos JavaScript?)		
		


> Guanabara ask...
------------------


		1 - Conseguiu simplificar seu código com o uso de array?
		
				Sim, o código fica muito simples e limpo.
				
				
				
		2 - Sabe colocar um array em ordem usando apenas uma chaada de função?
		
				Sim, seria da seguinte forma:
				
					declaro uma variável e depois digito um comando:
						let numero = [ 5, 4, 1, 3, 2]
						numero.sort() e numero ficará assim:
						numero = [ 1, 2, 3, 4, 5 ]
						
						
						
		3 - Lembra como disparar uma função simples quando apertamos um botão? 
		
				Sim, no html, informação com qual ação será dispara no JS (onmousemove, onclick, etc.) Em seguida damos uma nome a essa função ainda na mesma linha no HTML (então, para calcular uma conta quando clicasse no botão "Calcula" - onclick="calcular()"). No JS convocamos da seguinte maneira num arquivo externo:
				function calcular(){
					E aqui dentro "digitamos" o que queremos que aconteça
				}
				
				E no proprio arquivo do html, acrescentaoms a tag <script> (grelamente ao final do código) e dentro dela colocamos a function:
				
		<script>
		|	function calcular(){
		|	|	E aqui dentro "digitamos" o que queremos que aconteça
		|	}
		</script>


		
		${Funções em JS}
		
		
		O JS é uma linguagem que funciona sob um paradigma funcional, logo, FUNÇÃO é algo muito importante!
		
			Vamos a nossa histórinha pois em JS é exatamente como na vida real: Nós temos funções nela - ir pra escola, ir pro trabalho, comer, tomar banho, etc... são um conjunto de tarefas (são rotinas) que compoe o nosso dia-a-dia. Então,
			
			
				=> Imaginamos que a nossa mãe sempre, todas semana, ela nos dê dinheiro e peça pra gente ir a mercearia comprar leite. Nós vamos a mercearia, independente de como seria, nossa mãe não quer saber como você vai (de onibus, bicleta, skate, não importa) ou em que mercearia você vai, quanto o leite vai custar, NÃO IMPORTA. Nós vamos a mercearia, pagamos o leite e voltamos com o leite. NOSSA MÃE SÓ QUER SABER O SEGUINTE: - ELA TE CHAMA; - TE DÁ O DINHEIRO; - VOCÊ (O FILHO), VAI A MERCEARIA, COMPRA O LEITE - E RETORNA COM O LEITE <=
				
				
				Nas linguagens de programação chamamos isso (rotinas) de funções ou funcionalidades!
				
				
			M Ã E(1)      ---->	  D I N H E I R O(2)    ----->     F I L H O(3)   --------
			-----									  	   |
			  |								   	   	   |
			  |									   	   |
		          -------------	L E I T E(5)	<-------     M E R C E A R I A(4)  <-------
			
			
			
			
			ENTÃO, DANDO OS NOMES AOS BOIS:
			
				- Quando a sua mãe te chama, te dá uma ordem, ela faz uma
					(1)CHAMADA; toda função precisa ter uma chamada, ou você pode ter uma funcionalidade que acontece toda quarta-feira você ter curso de karatê ou toda vez que chove, você precisa recolher a roupa do varal. Não é necessária a chamada, você não precisa de um disparo da sua mãe, o seu disparo é o relógio ou a chuva. A chamada nem sempre é vocal, ne sempre é verbalizada. Pode ser que ela seja automatizada.
				- Você não pode ir a mercearia sem dinheiro, sem alguma coisa de entrada, o que chamamos de 
					(2) PARÂMETRO; Nessa históra nós temos dois parâmetros: o dinheiro e aquilo que a sua mãe queria, que era o leite. Isso é um parâmetro de entrada e faz parte da chamada também. 
				
				- Quando você tá em posse do dinheiro e sabe da informação que o que a sua mãe quer, é o leite, você vai até a mercearia, o processo todo pra poder voltar com o leite chamamos de  
					(3-4)AÇÃO; então toda função também tem uma ação envolvida.
				- E no final, quando você já está voltando com o leite para casa para retorná-lo a sua mãe, você faz o 
					(5)RETORNO;
					
			
			ENTÃO TODA FUNÇÃO PODE TER OS SEGUINTES FATORES:
				
				- UMA CHAMADA;
				- UM CONJUNTO DE PARÂMETROS;
				- UMA AÇÃO e 
				- UM RETORNO.
			
			Nem toda função usa parâmetros, nem toda função tem retornos.
			
			



AS DEFINIÇÕES DE FUNÇÃO TEM AS SEGUINTES DEFINIÇÕES:
			
					=>> SÃO AÇÕES EXECUTADAS ASSIM QUE SÃO CHAMADAS OU EM OCORRÊNCIA DE ALGUM EVENTO!
					
					==>> UMA FUNÇÃO PODE RECEBER PARÂMETROS (no nosso caso é o dinheiro) E RETORNAR UM RESULTADO (e no nosso 												caso é o leite)
					
				 |---------> chamamos de parâmetro formal	
			      ------		
		function ação(param){	  |-----
			****                   |
			****                   |---->  Quando eu executar esse código, ele irá pular essa função e irá para a chamada ali embaixo.
			****                   |	E vai executar só aquele comando ali (ação(5)). Eu vou executar essa ação passando um
			return res             |	valor, passando 5. Esse 5 irá lá para o param da function ação. Então, nesse caso aqui, o
		}			  |-----	parâmetro valerá 5. Depois de executado o bloco dentro de chaves (os * dali), a função 
							poderá retornar um resultado (que é a linha dentro de chaves, 'resturne res'). Esse retorno
							de resultado será voltado de novo ali para quem fez a chamada (ação), no caso a sua mãe, na
[fazendo ---> 	ação(5)				nossa história real.
chamada]  	    ---					Então, a chamada nesse caso é a feita do lado de fora da nossa function (diferente)
		     |						De quando fizemos as chamadas quando estavamos manipulando o dom usando o 'onclick'
		     |						como chamada. 
		     |					 
		     |
		     |---> chamamos de parâmetro real
		     
		     
		     Ex:
		     
		     		function parimp(n){
		     		|	if(n%2 == 0){
		     		|	|	
		     		|	|	return 'Par'
		     		|	|
		     		|	} else {
		     		|	|	
		     		|	|	return 'Impar'
		     		|	|
		     		|	}
		     		}
		     		
		     		let res = parimp(3)   <--- Sem a chamada o código executará mas não mostrará nada!
		     					<-- Então, o JS retornará impar para o res e se eu mandar mostrar res, printará na tela 								    'impar'.
		     					***** Uma função em JS só pode ter um retorno!
		     					 
 

function parimp(n){
    if(n%2 == 0){
        return 'par!'
    } else {
        return 'Impar!'
    }
}

let res = parimp(2581)

console.log(res)

//  console.log(parimp(258))  <= Poderia ser assim direto

---------------------------------------------------------------------
			
/* function soma(n1, n2){
    return n1 + n2
}

console.log(soma(7))

Quando não colocamos ' = 0' nos parametros, caso deixarmos de dar os valores nas chamadas, a resposta sera NaN (not a number)
porém se colocarmos, o parâmetros que não foi chamado será substituido por zero.  
*/ 
function soma(n1=0, n2=0, n3=0){
    return n1 + n2 + n3
}

console.log(soma(7))


			**Conseguimos ainda colocar uma function dentro de uma variável**
		
		
		
		// Podemos ainda colocar uma function dentro de uma variável

let x = function(n){
    return n*2
}

console.log(x(6)) // Ou seja, eu passei pra minha variável um parâmetro e ele conseguiu executar uma função!	
	
	
			
		(Há uma sintaxe também que se chama arrow function = São as funções arrow - flecha - que usam esse sinal => )
		
		
		


/* Calcular o fatorial de um número
5! = 5 x 4 x 3 x 2 x 1 = 120
Maneira tradicional */ 

function fatorial(n){
    let fat = 1
    for (let c = n; c > 1; c--){
        fat *= c
    }
    return fat
}

console.log(fatorial(5))


---------------------------------------------------------------------


// Recursividade

function fatorial(n){
    if (n == 1){
        return 1
    } else {
        return n * fatorial(n-1) 
    }
}

console.log(fatorial(17))

// a função fatorial possui uma chamda pra ela mesma

/*

5! = 5 x 4 x 3 x 2 x 1 = 120
5! = 5 x 4!

n! = n x (n-1)!
1! = 1
*/


Lembre-se o que são:
	
	- funções;
	- chamadas;
	- paramêtros;
	- ações;
	- retorno.
	


-------------------------------------------------------------------------------------------------------------------------------------------------


		---------------------------------
		 Exercícios JavaScript (Parte 7)
		---------------------------------
		

(Vamos fazer alguns exercícios de JavaScript? Chegou a hora de provar a si mesmo que todo o seu esforço está valendo a pena até aqui. Quando aprendemos e praticamos, solicitamos os nossos conhecimentos adquiridos. Então vamos lá! Não pule esse vídeo e faça todas as atividades propostas em JavaScript)		
		


> Guanabara ask...
------------------

		1 - Já aprendeu a usar direito a extensão Watch in Chrome no VSCode?
		
			Não, pois o mesmo já não está disponível. (Estou usando o live server.)
			
		2 - Já aprendeu a usar o Modo de Depuração do VSCode? 
		
			Acredito que sim, de forma genérica, mas sim!
			
		3 - Já treinou bastante com os componentes arrays e functions?
		
		Treinei, mas não o suficiente!
		
		
	
	${Hora de Praticar}
	
			
Minha tentativa


function adicionar(){
    let num = document.getElementById('txtnum')
    let insere = document.getElementById('txtinsere')
    let item = []

    if (num.value.length == 0){
        alert('[ERRO] Informe um número!')
    } else {
        let numero = Number(num.value)
        
        if (numero < 1 || numero > 100){
            alert('[ERRO] Valor inválido ou já encontrado na lista')
        }
        item = numero
        if (numero.indexOf(numero) != -1){
            alert('[ERRO] Valor inválido ou já encontrado na lista')
        } else {
            item = document.createElement('option')
            insere.appendChild(item)
            item.text = `Valor ${numero} adicionado.`
            item++
        }   
    }
}

function finalizar(){
    return item.innerHTML += 
    `Ao todo, temos ${item.length} números cadastrados. </br>`
}




-------------------------------------------------------------------------------------------------------------------------------------------------


		---------------------------------
		 Exercícios JavaScript (Parte 8)
		---------------------------------
		

(Vamos fazer alguns exercícios de JavaScript? Chegou a hora de provar a si mesmo que todo o seu esforço está valendo a pena até aqui. Quando aprendemos e praticamos, solicitamos os nossos conhecimentos adquiridos. Então vamos lá! Não pule esse vídeo e faça todas as atividades propostas em JavaScript)		
		


> Guanabara ask...
------------------

	(No questions!)



	${RESOLUÇÃO GUANABARA}
	
		
==>> HTML


<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Analisador de Números</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    
    <header>
        <h1>Analisador de Números</h1>
    </header>

    <section>
        <div>
            <p>Número (entre 1 e 100): 
                <input type="number" name="fnum" id="fnum">
                <input type="button" value="Adicionar" onclick="adicionar()">
            </p>
            <p><select name="flista" id="flista" size="8"></select></p>
            <input type="button" value="Finalizar" onclick="finalizar()">
                
        </div>

        <div id="res">
            <p>
                
            </p>
        </div>
    </section>

    <footer>
        <p>&copy; CursoemVídeo</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>


==>> CSS

body{
    background: rgb(137, 137, 235);
    font: normal 15pt Arial;
}

header{
    color: #ffffff;
    text-align: center;
}

section{
    background: #ffffff;
    border-radius: 10px;
    padding: 15px;
    width: 500px;
    margin: auto;
    box-shadow: 5px 5px 8px rgba(0, 0, 0, 0.527);
}

select{
    width: 150px;
}

footer{
    color: #ffffff;
    text-align: center;
    font-style: italic;
}



==>> JS

let num = document.querySelector('input#fnum')
let lista = document.querySelector('select#flista')
let res = document.querySelector('div#res')
let valores = []


function isNumero(n){
    if(Number(n) >= 1 && Number(n) <= 100){
        return true
    } else {
        return false
    }
}

function inLista(n, l){
    if(l.indexOf(Number(n)) != -1){
        return true
    } else {
        return false
    }
}

function adicionar(){
    if(isNumero(num.value) && !inLista(num.value, valores)){
        valores.push(Number(num.value))
        let item = document.createElement('option')
        item.text = `Valor ${num.value} adicionado.`
        lista.appendChild(item)
        res.innerHTML = ''
    } else {
        alert('[ERRO] Valor inválido ou já se encontra na lista!')
    }
    num.value = ''
    num.focus()
}

function finalizar(){
    if(valores.length == 0){
        alert('Informe um número para continuar!')
    } else {
        let tot = valores.length
        let maior = valores[0]
        let menor = valores[0]
        let soma = 0
        let media = 0
        for(let pos in valores){
            soma += valores[pos]
            if(valores[pos] > maior)
            maior = valores[pos]
        }
        for(let pos in valores){
            if(valores[pos] < menor)
            menor = valores[pos]
        }
        media = soma/tot

        res.innerHTML = ''
        res.innerHTML += `<p>O total de elementos informados foram <strong>${tot}</strong> elementos.</p>`
        res.innerHTML += `<p>O maior valor informado foi o número <strong>${maior}</strong>.</p>`
        res.innerHTML += `<p>O menor valor informado foi o número <strong>${menor}</strong>.</p>`
        res.innerHTML += `<p>Somando todos os valores, o total é <strong>${soma}</strong>.</p>`
        res.innerHTML += `<p>A média de todos os valores, é igual a <strong>${media}</strong>.</p>`
    }
}
		
		
let num = document.querySelector('input#fnum')
let lista = document.querySelector('select#flista')
let res = document.querySelector('div#res')
let valores = [] 
/* 1º erro = colocar o array dentro de uma função especifica ao invés de fazer a declaração dentro do escopopara 
que todo o código tivesse acesso ao mesmo */


function isNumero(n){
    if(Number(n) >= 1 && Number(n) <= 100){
        return true
    } else {
        return false
    }
}

function inLista(n, l){
    if(l.indexOf(Number(n)) != -1){
        return true
    } else {
        return false
    }
}

/* 2º erro = não utilizei a ultima aula sobre funções, quando o Guanabara mostra uma forma de uma função fazer uma chamada
para outra função */

// 3º Eu percebi que os valores não estavam sendo adicionados no array (usando o .push() resolvemos esse problema)

/* 4º Eu usei as divs do html errados também pensando que eu deveria partilhar os botões nas div, enquanto na verdade o que 
 eu deveria ter feito era colocar inputs em uma div e o res em outra. */
function adicionar(){
    if(isNumero(num.value) && !inLista(num.value, valores)){
        valores.push(Number(num.value))
        let item = document.createElement('option')
        item.text = `Valor ${num.value} adicionado.`
        lista.appendChild(item)
        res.innerHTML = ''
    } else {
        alert('[ERRO] Valor inválido ou já se encontra na lista!')
    }
    num.value = ''
    num.focus()
}

function finalizar(){
    if(valores.length == 0){
        alert('Informe um número para continuar!')
    } else {
        let tot = valores.length
        let maior = valores[0]
        let menor = valores[0]
        let soma = 0
        let media = 0

        /* Percebi também que mesmo que eu tivesse conseguido chegar a essa parte do exercício, eu não teria usado esse laço
        pra conseguir o que eu precisava*/
            
        for(let pos in valores){
            soma += valores[pos]
            if(valores[pos] > maior)
            maior = valores[pos]
        }
        for(let pos in valores){
            if(valores[pos] < menor)
            menor = valores[pos]
        }
        media = soma/tot

        res.innerHTML = ''
        res.innerHTML += `<p>O total de elementos informados foram <strong>${tot}</strong> elementos.</p>`
        res.innerHTML += `<p>O maior valor informado foi o número <strong>${maior}</strong>.</p>`
        res.innerHTML += `<p>O menor valor informado foi o número <strong>${menor}</strong>.</p>`
        res.innerHTML += `<p>Somando todos os valores, o total é <strong>${soma}</strong>.</p>`
        res.innerHTML += `<p>A média de todos os valores, é igual a <strong>${media}</strong>.</p>`
    }
}
		
		
-------------------------------------------------------------------------------------------------------------------------------------------------
		
		----------------------------
		 Aula 17 – Próximos Passos
		----------------------------
		

()		
		


> Guanabara ask...
------------------

	(No questions!)	
		
		
		

-------------------------------------------------------------------------------------------------------------------------------------------------
Teste JavaScript




